<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="Ontologia PHP">
  <file path="lib/LibRDF/LibRDF.php" hash="fce26e671a43fd701b7a3e30a5b119a2" package="LibRDF">
    <docblock line="3">
      <description>Constants and default includes for the LibRDF package.</description>
      <long-description>&lt;p&gt;This file can be included by code using the LibRDF package to include
all necessary classes.&lt;/p&gt;

&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="38" type="Require Once" package="Default">
      <name/>
      <docblock line="36">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="39" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="40" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="41" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="42" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="43" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="44" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="45" type="Require Once" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="50" package="LibRDF">
      <name>RDF_BASE_URI</name>
      <full_name>\RDF_BASE_URI</full_name>
      <value>"http://www.w3.org/1999/02/22-rdf-syntax-ns#"</value>
    </constant>
  </file>
  <file path="lib/LibRDF/Node.php" hash="2f5b6dc94d4ed2f08a72bb03456ddf38" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Node, a node or arc in an RDF graph.</description>
      <long-description>&lt;p&gt;A LibRDF_Node is the type of the {@link LibRDF_Statement} triples.&lt;/p&gt;

&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="37" type="Require Once" package="Default">
      <name/>
      <docblock line="35">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="38" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="true" namespace="global" line="55" package="LibRDF">
      <extends/>
      <name>LibRDF_Node</name>
      <full_name>\LibRDF_Node</full_name>
      <docblock line="40">
        <description>A wrapper around the librdf_node datatype.</description>
        <long-description>&lt;p&gt;The values of nodes come from three potential, disjoint sets: URIs,
literal strings and blank identifiers.  These types are represented by
{@link LibRDF_URINode}, {@link LibRDF_LiteralNode} and
{@link LibRDF_BlankNode}, respectively.&lt;/p&gt;</long-description>
        <tag line="40" name="package" description="LibRDF"/>
        <tag line="40" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="40" name="copyright" description="2006 David Shea"/>
        <tag line="40" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="40" name="version" description="Release: 1.0.0"/>
        <tag line="40" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="65" namespace="global" package="Default">
        <name>$node</name>
        <default/>
        <docblock line="57">
          <description>The underlying librdf_node resource.</description>
          <long-description>&lt;p&gt;This value must be set by the constructors for the concrete node types.&lt;/p&gt;</long-description>
          <tag line="57" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="57" name="access" description="protected"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="67">
          <description>Destroy the Node object.</description>
          <long-description/>
          <tag line="67" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="67" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="87" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="80">
          <description>Create a new node object from an existing node.</description>
          <long-description/>
          <tag line="80" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="80" name="throws" description="If unable to copy the node" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="80" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="102" package="LibRDF">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="96">
          <description>Return a string representation of the node.</description>
          <long-description/>
          <tag line="96" name="return" description="A string representation of the node" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="129" package="LibRDF">
        <name>isEqual</name>
        <full_name>isEqual</full_name>
        <docblock line="117">
          <description>Compare this node with another node for equality.</description>
          <long-description>&lt;p&gt;Nodes of different types are not equal; thus, a URI of
http://example.org/ and a literal string of http://example.org are not
equal, even though they contain the same string.  Similarly, literal
nodes must match in both type and language to be considered equal.&lt;/p&gt;</long-description>
          <tag line="117" name="param" description="The node against which to compare" type="\LibRDF_Node" variable="$node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="117" name="return" description="Whether the nodes are equal" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="117" name="access" description="public"/>
        </docblock>
        <argument line="129">
          <name>$node</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="143" package="LibRDF">
        <name>getNode</name>
        <full_name>getNode</full_name>
        <docblock line="134">
          <description>Return the underlying librdf_node resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and should not
be called.&lt;/p&gt;</long-description>
          <tag line="134" name="return" description="The wrapped node" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="134" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="161" package="LibRDF">
        <name>makeNode</name>
        <full_name>makeNode</full_name>
        <docblock line="148">
          <description>Wrap a librdf_node resource in the correct Node object.</description>
          <long-description>&lt;p&gt;This function is intended for use by LibRDF classes, allowing them
to easily convert a librdf_node resource into the correct type of
LibRDF_Node object.&lt;/p&gt;</long-description>
          <tag line="148" name="param" description="The librdf_node to convert" type="resource" variable="$node">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="148" name="return" description="A concrete object implementing Node" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="148" name="throws" description="If unable to create a new node" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="148" name="access" description="public"/>
          <tag line="148" name="static" description=""/>
        </docblock>
        <argument line="161">
          <name>$node</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="189" package="LibRDF">
      <extends>\LibRDF_Node</extends>
      <name>LibRDF_URINode</name>
      <full_name>\LibRDF_URINode</full_name>
      <docblock line="179">
        <description>A specialized version of {@link LibRDF_Node} representing a URI.</description>
        <long-description/>
        <tag line="179" name="package" description="LibRDF"/>
        <tag line="179" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="179" name="copyright" description="2006 David Shea"/>
        <tag line="179" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="179" name="version" description="Release: 1.0.0"/>
        <tag line="179" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="199" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="191">
          <description>Create a new URINode from a URI object.</description>
          <long-description/>
          <tag line="191" name="param" description="The URI string or librdf_node value to use" type="mixed" variable="$uri">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="191" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="191" name="throws" description="If unable to create a new URI" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="191" name="access" description="public"/>
        </docblock>
        <argument line="199">
          <name>$uri</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="219" package="Default">
      <extends>\LibRDF_URINode</extends>
      <name>LibRDF_NS</name>
      <full_name>\LibRDF_NS</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="227" package="Default">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="221">
          <description>Return a new URINode based on this one</description>
          <long-description/>
          <tag line="221" name="return" description="" type="\LibRDF_URINode">
            <type by_reference="false">\LibRDF_URINode</type>
          </tag>
          <tag line="221" name="access" description="public"/>
        </docblock>
        <argument line="227">
          <name>$localPart</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="245" package="LibRDF">
      <extends>\LibRDF_Node</extends>
      <name>LibRDF_BlankNode</name>
      <full_name>\LibRDF_BlankNode</full_name>
      <docblock line="235">
        <description>A representation of a blank node.</description>
        <long-description/>
        <tag line="235" name="package" description="LibRDF"/>
        <tag line="235" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="235" name="copyright" description="2006 David Shea"/>
        <tag line="235" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="235" name="version" description="Release: 1.0.0"/>
        <tag line="235" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="255" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="247">
          <description>Create a new blank node with an optional identifier.</description>
          <long-description/>
          <tag line="247" name="param" description="The nodeId value or librdf_node resource" type="mixed" variable="$nodeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="247" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="247" name="throws" description="If unable to create a new node" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="247" name="access" description="public"/>
        </docblock>
        <argument line="255">
          <name>$nodeId</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="291" package="LibRDF">
      <extends>\LibRDF_Node</extends>
      <name>LibRDF_LiteralNode</name>
      <full_name>\LibRDF_LiteralNode</full_name>
      <docblock line="279">
        <description>A representation of a literal node.</description>
        <long-description>&lt;p&gt;Literal nodes can have a type and a language, but not both.&lt;/p&gt;</long-description>
        <tag line="279" name="package" description="LibRDF"/>
        <tag line="279" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="279" name="copyright" description="2006 David Shea"/>
        <tag line="279" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="279" name="version" description="Release: 1.0.0"/>
        <tag line="279" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="421" namespace="global" package="Default">
        <name>$plainOutput</name>
        <default>false</default>
        <docblock line="417">
          <description>Whether to append datatype / language
to output of __toString</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="312" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="294">
          <description>Create a new Literal node.</description>
          <long-description>&lt;p&gt;Both the $language and $datatype parameters are optional.&lt;/p&gt;

&lt;p&gt;The value of the literal node can either be a string or an XML literal
in the form of a DOMNodeList object.  If using XML, a datatype of
http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral is implied, so
the datatype parameter cannot be used with XML.  A literal cannot have
both a language and a datatype.&lt;/p&gt;</long-description>
          <tag line="294" name="param" description="The literal value, either a string, a DOMNodeList or a librdf_node resource" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="294" name="param" description="An optional datatype URI for the literal value" type="string" variable="$datatype">
            <type by_reference="false">string</type>
          </tag>
          <tag line="294" name="param" description="An option language for the literal value" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
          <tag line="294" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="294" name="throws" description="If unabel to create a new node" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="294" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="395" package="LibRDF">
        <name>getDatatype</name>
        <full_name>getDatatype</full_name>
        <docblock line="389">
          <description>Return the datattype URI or NULL if this literal has no datatype.</description>
          <long-description/>
          <tag line="389" name="return" description="The datatype URI" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="389" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="412" package="LibRDF">
        <name>getLanguage</name>
        <full_name>getLanguage</full_name>
        <docblock line="405">
          <description>Return the language of this literal or NULL if the literal has no
language.</description>
          <long-description/>
          <tag line="405" name="return" description="The literal's language" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="405" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="426" package="LibRDF">
        <name>setPlainOutput</name>
        <full_name>setPlainOutput</full_name>
        <docblock line="423">
          <description/>
          <long-description/>
          <tag line="423" name="param" description="" type="bool" variable="$plain">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="426">
          <name>$plain</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="437" package="LibRDF">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="431">
          <description>Return a string representation of the node.</description>
          <long-description/>
          <tag line="431" name="return" description="A string representation of the node" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="431" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="219" code="50000">No DocBlock was found for \LibRDF_NS</error>
      <error line="221" code="50015">Argument $localPart is missing from the Docblock of __get()</error>
      <notice line="294" code="50013">Parameter $value could not be found in __construct()</notice>
      <notice line="294" code="50013">Parameter $datatype could not be found in __construct()</notice>
      <notice line="294" code="50013">Parameter $language could not be found in __construct()</notice>
      <error line="423" code="50012">No short description for method setPlainOutput()</error>
    </parse_markers>
  </file>
  <file path="lib/LibRDF/Error.php" hash="21cc5c8d7ac2d4f0e7e9f129cf326e3d" package="LibRDF">
    <docblock line="3">
      <description>Exceptions used by the LibRDF classes.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="49" package="LibRDF">
      <extends>\Exception</extends>
      <name>LibRDF_Error</name>
      <full_name>\LibRDF_Error</full_name>
      <docblock line="33">
        <description>The exception type used for LibRDF runtime errors.</description>
        <long-description>&lt;p&gt;An object of this type is thrown when a runtime error is encountered in the
PHP wrapper to the librdf wrapper though, in actuality, it is rarely used.
Runtime errors are more often expressed through the librdf extension
itself which, instead of throwing an exception, will produce a E_ERROR
message and halt the program.&lt;/p&gt;</long-description>
        <tag line="33" name="package" description="LibRDF"/>
        <tag line="33" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="33" name="copyright" description="2006 David Shea"/>
        <tag line="33" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="33" name="version" description="Release: 1.0.0"/>
        <tag line="33" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="51">
          <description>Create a new LibRDF_Error.</description>
          <long-description/>
          <tag line="51" name="param" description="The error message to use" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="51" name="access" description="public"/>
        </docblock>
        <argument line="58">
          <name>$message</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib/LibRDF/Query.php" hash="317c7aae92e8182eaf77f6ab1f804445" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Query, a representation of a query against a LibRDF_Model.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="35" type="Require Once" package="Default">
      <name/>
      <docblock line="33">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="36" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="37" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="54" package="LibRDF">
      <extends/>
      <name>LibRDF_Query</name>
      <full_name>\LibRDF_Query</full_name>
      <docblock line="39">
        <description>A wrapper around the librdf_query datatype.</description>
        <long-description>&lt;p&gt;A query is created independent of any context and is then executed, using
{@link execute}, against a particular model.  A query can be executed
multiple times and against multiple models.  Results are represented as
a {@link LibRDF_QueryResults} object.&lt;/p&gt;</long-description>
        <tag line="39" name="package" description="LibRDF"/>
        <tag line="39" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="39" name="copyright" description="2006 David Shea"/>
        <tag line="39" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="39" name="version" description="Release: 1.0.0"/>
        <tag line="39" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="62" namespace="global" package="Default">
        <name>$query</name>
        <default/>
        <docblock line="56">
          <description>The underlying librdf_query resource.</description>
          <long-description/>
          <tag line="56" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="56" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="80" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="64">
          <description>Create a new query.</description>
          <long-description>&lt;p&gt;Query language is any language supported by rasqal, including "rdql",
"sparql" and "triples".&lt;/p&gt;

&lt;p&gt;The syntax of the query is not checked until it is executed.&lt;/p&gt;</long-description>
          <tag line="64" name="param" description="The contents of the query" type="string" variable="$query_string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="The base URI to use" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="The language of the query (default rdql)" type="string" variable="$query_language">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="The URI of the query language or NULL" type="string" variable="$query_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="64" name="throws" description="If unable to create a new query" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="64" name="access" description="public"/>
        </docblock>
        <argument line="80">
          <name>$query_string</name>
          <default/>
          <type/>
        </argument>
        <argument line="80">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="81">
          <name>$query_language</name>
          <default>"rdql"</default>
          <type/>
        </argument>
        <argument line="81">
          <name>$query_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="100">
          <description>Free the query resources.</description>
          <long-description/>
          <tag line="100" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="100" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="122" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="113">
          <description>Clone the query.</description>
          <long-description>&lt;p&gt;Cloning may not be supported for all query types.&lt;/p&gt;</long-description>
          <tag line="113" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="113" name="throws" description="If unable to clone the query" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="113" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="LibRDF">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="131">
          <description>Run the query against a model.</description>
          <long-description/>
          <tag line="131" name="param" description="The model to query" type="\LibRDF_Model" variable="$model">
            <type by_reference="false">\LibRDF_Model</type>
          </tag>
          <tag line="131" name="return" description="The result of the query" type="\LibRDF_QueryResults">
            <type by_reference="false">\LibRDF_QueryResults</type>
          </tag>
          <tag line="131" name="throws" description="If unable to execute the query" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="131" name="access" description="public"/>
        </docblock>
        <argument line="139">
          <name>$model</name>
          <default/>
          <type>\LibRDF_Model</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib/LibRDF/ARC2_getFormat.php" hash="8a2aaa08bfbdc0820700ee550e34056e" package="ARC2">
    <docblock line="2">
      <description>ARC2 format detection function</description>
      <long-description/>
      <tag line="2" name="author" description="Benjamin Nowack &lt;bnowack@semsol.com&gt;"/>
      <tag line="2" name="license" description="http://arc.semsol.org/license"/>
      <tag line="2" name="package" description="ARC2"/>
      <tag line="2" name="version" description="2010-01-18"/>
    </docblock>
    <function namespace="global" line="11" package="ARC2">
      <name>ARC2_getFormat</name>
      <full_name>\ARC2_getFormat</full_name>
      <argument line="11">
        <name>$v</name>
        <default/>
        <type/>
      </argument>
      <argument line="11">
        <name>$mtype</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="11">
        <name>$ext</name>
        <default>''</default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <error line="11" code="50009">No DocBlock was found for function \ARC2_getFormat()</error>
    </parse_markers>
  </file>
  <file path="lib/LibRDF/Serializer.php" hash="1a454424457011992029149c7e7bca17" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Serializer, a wrapper around librdf_serializer.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="35" type="Require Once" package="Default">
      <name/>
      <docblock line="33">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="36" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="51" package="LibRDF">
      <extends/>
      <name>LibRDF_Serializer</name>
      <full_name>\LibRDF_Serializer</full_name>
      <docblock line="38">
        <description>A wrapper around the librdf_serializer datatype.</description>
        <long-description>&lt;p&gt;This class is used in conjunction with {@link LibRDF_Model} to produce
a serialization of a set of statements.&lt;/p&gt;</long-description>
        <tag line="38" name="package" description="LibRDF"/>
        <tag line="38" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="38" name="copyright" description="2006 David Shea"/>
        <tag line="38" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="38" name="version" description="Release: 1.0.0"/>
        <tag line="38" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="59" namespace="global" package="Default">
        <name>$serializer</name>
        <default/>
        <docblock line="53">
          <description>The underlying librdf_serializer resource.</description>
          <long-description/>
          <tag line="53" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="53" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="66" namespace="global" package="Default">
        <name>$namespaces</name>
        <default>array()</default>
        <docblock line="61">
          <description>Namespace mappings shared accross instances.</description>
          <long-description/>
          <tag line="61" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="68">
          <description>Create a new LibRDF_Serializer.</description>
          <long-description>&lt;p&gt;Name is the name of the serializer to use.  Common choices are
"rdfxml", "ntriples" and "turtle".&lt;/p&gt;

&lt;p&gt;The "rdfxml" serializer is not pretty, outputing a flat list of
one XML element per statement.  "rdfxml-abbrev" is a bit nicer, but
slower.&lt;/p&gt;</long-description>
          <tag line="68" name="param" description="The name of the serializer to use" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="The MIME type of the syntax" type="string" variable="$mime_type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="The URI of the syntax" type="string" variable="$type_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="68" name="throws" description="If unable to create a new serializer" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="68" name="access" description="public"/>
        </docblock>
        <argument line="85">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="85">
          <name>$mime_type</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="86">
          <name>$type_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="109" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="103">
          <description>Free the serializer's resources.</description>
          <long-description/>
          <tag line="103" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="103" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="125" package="LibRDF">
        <name>getSerializer</name>
        <full_name>getSerializer</full_name>
        <docblock line="116">
          <description>Return the wrapped librdf_serializer resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and should not
be called.&lt;/p&gt;</long-description>
          <tag line="116" name="return" description="The wrapper resource" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="116" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="LibRDF">
        <name>setNamespace</name>
        <full_name>setNamespace</full_name>
        <docblock line="130">
          <description>Set a prefix to URI mapping.</description>
          <long-description/>
          <tag line="130" name="param" description="The namespace URI" type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="130" name="param" description="The string prefix to use" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="130" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="130" name="throws" description="If unable to set the prefix" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="130" name="access" description="public"/>
        </docblock>
        <argument line="139">
          <name>$uri</name>
          <default/>
          <type/>
        </argument>
        <argument line="139">
          <name>$prefix</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="156" package="LibRDF">
        <name>setNamespaces</name>
        <full_name>setNamespaces</full_name>
        <docblock line="150">
          <description>Set namespace mappings on class level.</description>
          <long-description/>
          <tag line="150" name="param" description="" type="array" variable="$map">
            <type by_reference="false">array</type>
          </tag>
          <tag line="150" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$map</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib/LibRDF/Parser.php" hash="90ecd052087feec687b54b7d253b8a2a" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Parser, a wrapper around librdf_parser.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="35" type="Require Once" package="Default">
      <name/>
      <docblock line="33">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="36" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="37" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="38" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="54" package="LibRDF">
      <extends/>
      <name>LibRDF_Parser</name>
      <full_name>\LibRDF_Parser</full_name>
      <docblock line="40">
        <description>A wrapper around the librdf_parser datatype.</description>
        <long-description>&lt;p&gt;Parsers can be used to particular type of serialized RDF into a
{@link LibRDF_Model} or to simply convert the serialization into an
iteration of {@link LibRDF_Statement} objects.&lt;/p&gt;</long-description>
        <tag line="40" name="package" description="LibRDF"/>
        <tag line="40" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="40" name="copyright" description="2006 David Shea"/>
        <tag line="40" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="40" name="version" description="Release: 1.0.0"/>
        <tag line="40" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="62" namespace="global" package="Default">
        <name>$parser</name>
        <default/>
        <docblock line="56">
          <description>The underlying librdf_uri resource.</description>
          <long-description/>
          <tag line="56" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="56" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="78" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="64">
          <description>Create a new parser.</description>
          <long-description>&lt;p&gt;Name is the type of parser.  Common parsers are "rdfxml", "ntriples" and
"turtle".  If all arguments are NULL, any available parser for
application/rdf+xml will be used.&lt;/p&gt;</long-description>
          <tag line="64" name="param" description="The name of the parser to use" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="The MIME type of the values to parse" type="string" variable="$mime_type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="The URI of the RDF syntax to parse" type="string" variable="$type_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="64" name="throws" description="If unable to create a new parser" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="64" name="access" description="public"/>
        </docblock>
        <argument line="78">
          <name>$name</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="78">
          <name>$mime_type</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="79">
          <name>$type_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="99" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="93">
          <description>Free the parser's resources.</description>
          <long-description/>
          <tag line="93" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="93" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="115" package="LibRDF">
        <name>getParser</name>
        <full_name>getParser</full_name>
        <docblock line="106">
          <description>Return the underlying parser resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and shoult not
be called.&lt;/p&gt;</long-description>
          <tag line="106" name="return" description="The wrapper librdf_parser resource" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="106" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="LibRDF">
        <name>parseString</name>
        <full_name>parseString</full_name>
        <docblock line="120">
          <description>Parse a string and return an iterable object over the statements.</description>
          <long-description>&lt;p&gt;The object returned can be used in PHP foreach statements.  It is not
rewindable.&lt;/p&gt;</long-description>
          <tag line="120" name="param" description="The data to parse" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="param" description="The value to use for xml:base abbreviations" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="return" description="An iterator over the LibRDF_Statements parsed from the string" type="\LibRDF_StreamIterator">
            <type by_reference="false">\LibRDF_StreamIterator</type>
          </tag>
          <tag line="120" name="throws" description="If unable to parse the string" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="120" name="access" description="public"/>
        </docblock>
        <argument line="132">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
        <argument line="132">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="160" package="LibRDF">
        <name>parseURI</name>
        <full_name>parseURI</full_name>
        <docblock line="148">
          <description>Parse a URI and return an iterable object over the statements.</description>
          <long-description>&lt;p&gt;The object returned can be used in PHP foreach statements.  It is not
rewindable.&lt;/p&gt;</long-description>
          <tag line="148" name="param" description="The URI to parse" type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="148" name="param" description="The value to use for the base URI if different from $uri" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="148" name="return" description="An iterator over the LibRDF_Statements parsed from $uri" type="\LibRDF_StreamIterator">
            <type by_reference="false">\LibRDF_StreamIterator</type>
          </tag>
          <tag line="148" name="throws" description="If unable to parse the URI" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="148" name="access" description="public"/>
        </docblock>
        <argument line="160">
          <name>$uri</name>
          <default/>
          <type/>
        </argument>
        <argument line="160">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib/LibRDF/Storage.php" hash="cda3a3d8ac186e7edd6cbec3f808ba16" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Storage, an abstraction of an RDF graph as a set of statements.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="35" type="Require Once" package="Default">
      <name/>
      <docblock line="33">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="47" package="LibRDF">
      <extends/>
      <name>LibRDF_Storage</name>
      <full_name>\LibRDF_Storage</full_name>
      <docblock line="37">
        <description>A wrapper around the librdf_storage datatype.</description>
        <long-description/>
        <tag line="37" name="package" description="LibRDF"/>
        <tag line="37" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="37" name="copyright" description="2006 David Shea"/>
        <tag line="37" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="37" name="version" description="Release: 1.0.0"/>
        <tag line="37" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="55" namespace="global" package="Default">
        <name>$storage</name>
        <default/>
        <docblock line="49">
          <description>The underlying librdf_storage object.</description>
          <long-description/>
          <tag line="49" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="49" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="104" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="57">
          <description>Creates a new storage backend.</description>
          <long-description>&lt;p&gt;The storage methods available depends on the librdf configuration.
Methods always available are &lt;code&gt;memory',&lt;/code&gt;hashes', &lt;code&gt;file' and&lt;/code&gt;uri'.
Optional methods are &lt;code&gt;bdb',&lt;/code&gt;mysql' and &lt;code&gt;sqllite'.  The default is&lt;/code&gt;memory'.&lt;/p&gt;

&lt;p&gt;The name argument is mandatory for storage methods that required a named
handle, such as file and URI.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$stor = new LibRDF_Storage(storage_name="file", name="/tmp/filename");&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The options string passes storage_name specific options to the chosen
backend and uses the following form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$stor = new LibRDF_Storage("storage_name", "name",
             "key1='value1', key2='value2', ...");&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options values must be surrounded by single quotes for multiple
key/option pairs.&lt;/p&gt;

&lt;p&gt;The options common to all storage methods are:
   new - optional boolean (default false)
      If true, delete any existing store and create a new one, otherwise
      open an existing store.&lt;/p&gt;

&lt;p&gt;write - optional boolean (default true)
      If true, open the store in read-write mode.&lt;/p&gt;

&lt;p&gt;For hashes:
   hash-type - the name of any supported hash type (default 'memory')
      'memory' and 'file' hash types are always present, and 'bdb'
      may be available depending on compile-time configuration of
      librdf.&lt;/p&gt;

&lt;p&gt;dir - (default '.') the directory in which to create files&lt;/p&gt;

&lt;p&gt;mode - (default 0644) the octal file mode with which to create files&lt;/p&gt;</long-description>
          <tag line="57" name="param" description="The type of storage to use" type="string" variable="$storage_name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="param" description="A name for the storage handle" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="param" description="Options for the storage backend" type="string" variable="$options">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="57" name="throws" description="If unable to create a new storage" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="57" name="access" description="public"/>
        </docblock>
        <argument line="104">
          <name>$storage_name</name>
          <default>"memory"</default>
          <type/>
        </argument>
        <argument line="104">
          <name>$name</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="105">
          <name>$options</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="121" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="115">
          <description>Free the storage's resources.</description>
          <long-description/>
          <tag line="115" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="115" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="128">
          <description>Create a new storage in the same context as an existing storage.</description>
          <long-description>&lt;p&gt;When cloning a storage object, a new storage will be opened using
the same options as the existing one.  This may mean generating
new identifiers for files based on the existing identifier.&lt;/p&gt;</long-description>
          <tag line="128" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="128" name="throws" description="If unable to copy the storage" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="128" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="157" package="LibRDF">
        <name>getStorage</name>
        <full_name>getStorage</full_name>
        <docblock line="148">
          <description>Return the underlying storage resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and should not
be called.&lt;/p&gt;</long-description>
          <tag line="148" name="return" description="The storage resource" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="148" name="access" description="public"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="lib/LibRDF/QueryResults.php" hash="cfae297711f8d54b7a711b004546910f" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_QueryResults, the answer to a LibRDF_Query.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="35" type="Require Once" package="Default">
      <name/>
      <docblock line="33">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="36" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="37" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="38" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="true" namespace="global" line="59" package="LibRDF">
      <extends/>
      <implements>\Iterator</implements>
      <name>LibRDF_QueryResults</name>
      <full_name>\LibRDF_QueryResults</full_name>
      <docblock line="40">
        <description>A wrapper around the librdf_query_results datatype.</description>
        <long-description>&lt;p&gt;This is the generic query results wrapper.  There are three possible types
of query results--boolean (those returned by SPARQL "ASK"), bindings
(returned by "SELECT" in SPARQL and RDQL) and graph (such as those returned
by SPARQL "CONSTRUCT" and "DESCRIBE")--each with a specialized class, but
each is an iterable object.  This creates an odd case for booleans, which
are an iterator containing one element.  As a special concession for this
single-result case, {@link LibRDF_BooleanQueryResults} objects also have a
method to simply retrieve the boolean value without iteration.&lt;/p&gt;</long-description>
        <tag line="40" name="package" description="LibRDF"/>
        <tag line="40" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="40" name="copyright" description="2006 David Shea"/>
        <tag line="40" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="40" name="version" description="Release: 1.0.0"/>
        <tag line="40" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="69" namespace="global" package="Default">
        <name>$query_results</name>
        <default/>
        <docblock line="61">
          <description>The wrapped librdf_query_results datatype.</description>
          <long-description>&lt;p&gt;This resource must be set by the concrete query results classes.&lt;/p&gt;</long-description>
          <tag line="61" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="61" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="77" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="71">
          <description>Free the query result resources.</description>
          <long-description/>
          <tag line="71" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="71" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="95" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="84">
          <description>Clone the query.</description>
          <long-description>&lt;p&gt;Clonining a query is not supported, so this function disables the use
of the clone keyword by setting the underlying resource to NULL and
throwing an exception.&lt;/p&gt;</long-description>
          <tag line="84" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="84" name="throws" description="Always" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="84" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="LibRDF">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="104">
          <description>Return the query results as a string.</description>
          <long-description>&lt;p&gt;The language of the results depends on the query type.&lt;/p&gt;</long-description>
          <tag line="104" name="return" description="The query results as a string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="104" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="126" package="LibRDF">
        <name>to_string</name>
        <full_name>to_string</full_name>
        <docblock line="117">
          <description>Serialize the results to a string.</description>
          <long-description/>
          <tag line="117" name="param" description="The uri of the target syntax or NULL" type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="117" name="param" description="The base URI for the output or NULL" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="117" name="return" description="The results as a string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="117" name="throws" description="If unable to create a string from the results" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="117" name="access" description="public"/>
        </docblock>
        <argument line="126">
          <name>$uri</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="126">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="160" package="LibRDF">
        <name>makeQueryResults</name>
        <full_name>makeQueryResults</full_name>
        <docblock line="147">
          <description>Make a specialized query results object.</description>
          <long-description>&lt;p&gt;This function is intended for use by {@link LibRDF_Query}, allowing
the creating of a specific query results object from a
librdf_query_results resource.&lt;/p&gt;</long-description>
          <tag line="147" name="param" description="The librdf_query_results resource to wrap" type="resource" variable="$query_results">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="147" name="return" description="The wrapped query results" type="\LibRDF_QueryResults">
            <type by_reference="false">\LibRDF_QueryResults</type>
          </tag>
          <tag line="147" name="throws" description="If unable to wrap the object" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="147" name="access" description="public"/>
          <tag line="147" name="static" description=""/>
        </docblock>
        <argument line="160">
          <name>$query_results</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="201" package="LibRDF">
      <extends>\LibRDF_QueryResults</extends>
      <name>LibRDF_BooleanQueryResults</name>
      <full_name>\LibRDF_BooleanQueryResults</full_name>
      <docblock line="178">
        <description>A specialized librdf_query_results wrapper for boolean results.</description>
        <long-description>&lt;p&gt;Boolean results are returned when using an "ASK" query form to test
whether triples exist that satisfy certain conditions.  For example,&lt;/p&gt;

&lt;p&gt;&lt;samp&gt;PREFIX dc: &lt;a href="http://purl.org/dc/elements/1.1/"&gt;http://purl.org/dc/elements/1.1/&lt;/a&gt;&lt;br&gt;
ASK WHERE { ?book dc:creator ?author }&lt;/samp&gt;&lt;/p&gt;

&lt;p&gt;in SPARQL will return a boolean result representing whether there is any
triple with the http://purl.org/dc/elements/1.1/creator predicate.&lt;/p&gt;

&lt;p&gt;In addition to iteration (which will iterate over a single boolean element),
a function {@link getValue} is provided to simply retrieve the result the
query.&lt;/p&gt;</long-description>
        <tag line="178" name="package" description="LibRDF"/>
        <tag line="178" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="178" name="copyright" description="2006 David Shea"/>
        <tag line="178" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="178" name="version" description="Release: 1.0.0"/>
        <tag line="178" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="210" namespace="global" package="Default">
        <name>$isvalid</name>
        <default/>
        <docblock line="203">
          <description>Whether the iterator is still valid; i.e., whether next() has not been
called.</description>
          <long-description/>
          <tag line="203" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="203" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="220" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="212">
          <description>Create a new boolean query result object.</description>
          <long-description/>
          <tag line="212" name="param" description="The query results to wrap" type="resource" variable="$query_results">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="212" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="212" name="throws" description="If unable to wrap the query results" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="212" name="access" description="public"/>
        </docblock>
        <argument line="220">
          <name>$query_results</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="236" package="LibRDF">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="230">
          <description>Return the boolean value of the result.</description>
          <long-description/>
          <tag line="230" name="return" description="The value of the query" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="230" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="251" package="LibRDF">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="245">
          <description>Rewind the iterator.</description>
          <long-description/>
          <tag line="245" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="245" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="262" package="LibRDF">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="256">
          <description>Return the current (and only) boolean value.</description>
          <long-description/>
          <tag line="256" name="return" description="The current value" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="256" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="278" package="LibRDF">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="272">
          <description>Return the iterator key (always 0).</description>
          <long-description/>
          <tag line="272" name="return" description="The current key" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="272" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="292" package="LibRDF">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="283">
          <description>Advance the iterator.</description>
          <long-description>&lt;p&gt;Since boolean results have only one result, this function renders the
iterator invalid.&lt;/p&gt;</long-description>
          <tag line="283" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="283" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="303" package="LibRDF">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="297">
          <description>Test whether the iterator is still valid.</description>
          <long-description/>
          <tag line="297" name="return" description="Whether the iterator is valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="297" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="327" package="LibRDF">
      <extends>\LibRDF_QueryResults</extends>
      <name>LibRDF_GraphQueryResults</name>
      <full_name>\LibRDF_GraphQueryResults</full_name>
      <docblock line="309">
        <description>A specialized librdf_query_results wrapper for graph results.</description>
        <long-description>&lt;p&gt;Graph results are returned by queries that construct a graph based on
triples that meet certain conditions such as those using the "CONSTRUCT"
or "DESCRIBE" SPARQL keywords.&lt;/p&gt;

&lt;p&gt;Iterating over this class will result in a stream of
{@link LibRDF_Statement} objects, similar to the result of iterating over
a {@link LibRDF_Model}.&lt;/p&gt;</long-description>
        <tag line="309" name="package" description="LibRDF"/>
        <tag line="309" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="309" name="copyright" description="2006 David Shea"/>
        <tag line="309" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="309" name="version" description="Release: 1.0.0"/>
        <tag line="309" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="335" namespace="global" package="Default">
        <name>$iterator</name>
        <default/>
        <docblock line="329">
          <description>The LibRDF_StreamIterator used for iterating over the statements.</description>
          <long-description/>
          <tag line="329" name="var" description="" type="\LibRDF_StreamIterator">
            <type by_reference="false">\LibRDF_StreamIterator</type>
          </tag>
          <tag line="329" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="345" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="337">
          <description>Create a new graph query result object.</description>
          <long-description/>
          <tag line="337" name="param" description="The query results to wrap" type="resource" variable="$query_results">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="337" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="337" name="throws" description="If unable to wrap the query results" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="337" name="access" description="public"/>
        </docblock>
        <argument line="345">
          <name>$query_results</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="361" package="LibRDF">
        <name>resetIterator</name>
        <full_name>resetIterator</full_name>
        <docblock line="355">
          <description>Reset the $iterator variable with a new librdf_stream.</description>
          <long-description/>
          <tag line="355" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="355" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="374" package="LibRDF">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="368">
          <description>Rewind the iterator.</description>
          <long-description/>
          <tag line="368" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="368" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="385" package="LibRDF">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="379">
          <description>Fetch the current statement on the iterator.</description>
          <long-description/>
          <tag line="379" name="return" description="The current statement" type="\LibRDF_Statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="379" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="397" package="LibRDF">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="391">
          <description>Fetch the iterator's current key.</description>
          <long-description/>
          <tag line="391" name="return" description="The current key" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="391" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="409" package="LibRDF">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="403">
          <description>Advance the iterator to the next statement.</description>
          <long-description/>
          <tag line="403" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="403" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="421" package="LibRDF">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="415">
          <description>Return whether the iterator is still valid.</description>
          <long-description/>
          <tag line="415" name="return" description="Whether the iterator is valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="415" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="449" package="LibRDF">
      <extends>\LibRDF_QueryResults</extends>
      <name>LibRDF_BindingsQueryResults</name>
      <full_name>\LibRDF_BindingsQueryResults</full_name>
      <docblock line="428">
        <description>A specialized librdf_query_results wrapper for bindings results.</description>
        <long-description>&lt;p&gt;Bindings are returned by SELECT statements and associate result nodes with
names for each tuple in the result set.  For example, the query&lt;/p&gt;

&lt;p&gt;&lt;samp&gt;SELECT ?book, ?author WHERE (?book, dc:creator, ?author)&lt;br&gt;
USING dc for &lt;a href="http://purl.org/dc/elements/1.1/"&gt;http://purl.org/dc/elements/1.1/&lt;/a&gt;"&lt;/samp&gt;&lt;/p&gt;

&lt;p&gt;in RDQL would result in a set of tuples, each containing a value for
"author" and "book".  This results of iterating over this object are
associative arrays of the result names and values.  The iterator cannot
be rewound.&lt;/p&gt;</long-description>
        <tag line="428" name="package" description="LibRDF"/>
        <tag line="428" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="428" name="copyright" description="2006 David Shea"/>
        <tag line="428" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="428" name="version" description="Release: 1.0.0"/>
        <tag line="428" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="457" namespace="global" package="Default">
        <name>$isvalid</name>
        <default/>
        <docblock line="451">
          <description>Whether the iterator is still valid.</description>
          <long-description/>
          <tag line="451" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="451" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="466" namespace="global" package="Default">
        <name>$rewindable</name>
        <default/>
        <docblock line="459">
          <description>Whether the iterator is rewindable; i.e., whether the iterator has been
advanced.</description>
          <long-description/>
          <tag line="459" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="459" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="476" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="468">
          <description>Create a new bindings query result object.</description>
          <long-description/>
          <tag line="468" name="param" description="The query results to wrap" type="resource" variable="$query_results">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="468" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="468" name="throws" description="If unable to wrap the query results" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="468" name="access" description="public"/>
        </docblock>
        <argument line="476">
          <name>$query_results</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="497" package="LibRDF">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="488">
          <description>Rewind the iterator.</description>
          <long-description>&lt;p&gt;Rewinding is not supported, so this function will invalidate the
iterator unless it is still in the initial (rewound) position.&lt;/p&gt;</long-description>
          <tag line="488" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="488" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="514" package="LibRDF">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="504">
          <description>Return the current tuple of bindings.</description>
          <long-description>&lt;p&gt;The result is an associative array using the binding names as the
indices.&lt;/p&gt;</long-description>
          <tag line="504" name="return" description="The current bindings tuple" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="504" name="throws" description="If unable to get the current bindings tuple" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="504" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="545" package="LibRDF">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="539">
          <description>Return the current key.</description>
          <long-description/>
          <tag line="539" name="return" description="The current key" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="539" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="556" package="LibRDF">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="550">
          <description>Advance the iterator.</description>
          <long-description/>
          <tag line="550" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="550" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="575" package="LibRDF">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="569">
          <description>Return whether the iterator is still valid.</description>
          <long-description/>
          <tag line="569" name="return" description="Whether the iterator is valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="569" name="access" description="public"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="lib/LibRDF/Model.php" hash="f56053558579b77bacd3d8bd655c5e11" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Model, a representation of an RDF graph.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="author" description="Felix Ostrowski &lt;felix.ostrowski@googlemail.com&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="copyright" description="2011, 2012 Felix Ostrowski"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="37" type="Require Once" package="Default">
      <name/>
      <docblock line="35">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="38" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="39" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="40" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="41" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="42" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="43" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="44" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="45" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="46" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="47" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="62" package="LibRDF">
      <extends>\Exception</extends>
      <name>LibRDF_LookupError</name>
      <full_name>\LibRDF_LookupError</full_name>
      <docblock line="49">
        <description>The exception type used for statement lookup failures.</description>
        <long-description>&lt;p&gt;An object of this type is thrown by {@link LibRDF_Model} when getSource,
getArc or getTarget is called with nodes that do not match any statement.&lt;/p&gt;</long-description>
        <tag line="49" name="package" description="LibRDF"/>
        <tag line="49" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="49" name="copyright" description="2006 David Shea"/>
        <tag line="49" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="49" name="version" description="Release: 1.0.0"/>
        <tag line="49" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="64">
          <description>Create a new LibRDF_LookupError.</description>
          <long-description/>
          <tag line="64" name="param" description="The error message to use" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="64" name="access" description="public"/>
        </docblock>
        <argument line="71">
          <name>$message</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="107" package="LibRDF">
      <extends/>
      <implements>\Iterator</implements>
      <name>LibRDF_Model</name>
      <full_name>\LibRDF_Model</full_name>
      <docblock line="77">
        <description>A wrapper around the librdf_model datatype.</description>
        <long-description>&lt;p&gt;A LibRDF_Model is a collection of {@link LibRDF_Statement} objects using
a {@link LibRDF_Storage} object to save the statements.  Statements are
added using {@link addStatement} or through the use of a
{@link LibRDF_Parser} and {@link loadStatementsFromString} or
{@link loadStatementsFromURI}, and statements are removed using
{@link removeStatement}.  Statements can be queried through the use of
either {@link findStatements} or a {@link LibRDF_Query} object.  The
statements can be written to a stream using {@link LibRDF_Serializer} and
{@link serializeStatements} or {@link serializeStatementsToFile}.&lt;/p&gt;

&lt;p&gt;This object is iterable.  When used as part of a foreach statement, it
will iterate over every statement contained in the model.  For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach ($model as $statement) {
   echo $statement;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will echo each statement individually.  Unlike {@link LibRDF_StreamIterator},
the Model can be rewound and used for multiple iterations.&lt;/p&gt;</long-description>
        <tag line="77" name="package" description="LibRDF"/>
        <tag line="77" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="77" name="copyright" description="2006 David Shea"/>
        <tag line="77" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="77" name="version" description="Release: 1.0.0"/>
        <tag line="77" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="115" namespace="global" package="Default">
        <name>$model</name>
        <default/>
        <docblock line="109">
          <description>The underlying librdf_model.</description>
          <long-description/>
          <tag line="109" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="109" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="128" namespace="global" package="Default">
        <name>$iterator</name>
        <default/>
        <docblock line="117">
          <description>The stream iterator over the model's statements.</description>
          <long-description>&lt;p&gt;This variable begins as NULL and is set by the iteration functions
using {@link resetIterator}.  {@link rewind} resets this variable to
null, causing subsequent calls of the other iteration function to
begin anew with a fresh iterator.&lt;/p&gt;</long-description>
          <tag line="117" name="var" description="" type="\LibRDF_StreamIterator">
            <type by_reference="false">\LibRDF_StreamIterator</type>
          </tag>
          <tag line="117" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="142" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="130">
          <description>Create a new librdf_model.</description>
          <long-description>&lt;p&gt;See the {@link http://librdf.org/ librdf} documentation for information
on the possible options.&lt;/p&gt;</long-description>
          <tag line="130" name="param" description="The storage on which this model should be built" type="\LibRDF_Storage" variable="$storage">
            <type by_reference="false">\LibRDF_Storage</type>
          </tag>
          <tag line="130" name="param" description="Options to pass to librdf_new_model" type="string" variable="$options">
            <type by_reference="false">string</type>
          </tag>
          <tag line="130" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="130" name="throws" description="If unable to create a new model" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="130" name="access" description="public"/>
        </docblock>
        <argument line="142">
          <name>$storage</name>
          <default/>
          <type>\LibRDF_Storage</type>
        </argument>
        <argument line="142">
          <name>$options</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="160" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="154">
          <description>Free a model's resources.</description>
          <long-description/>
          <tag line="154" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="154" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="176" package="LibRDF">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="167">
          <description>Return a string representation of the model.</description>
          <long-description>&lt;p&gt;This function can be used as a lazy form of serializtion.  Use
a {@link LibRDF_Serializer} if you care about the format of the output.&lt;/p&gt;</long-description>
          <tag line="167" name="return" description="The model as a string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="167" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="192" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="181">
          <description>Create a copy of the model.</description>
          <long-description>&lt;p&gt;Whether a model can be copied depends upon the underlying model factory.
In-memory storages cannot be cloned, so a clone of models using this
form of storage will fail.&lt;/p&gt;</long-description>
          <tag line="181" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="181" name="throws" description="If unable to copy the model" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="181" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="210" package="LibRDF">
        <name>getModel</name>
        <full_name>getModel</full_name>
        <docblock line="201">
          <description>Return the model resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and should not
be called.&lt;/p&gt;</long-description>
          <tag line="201" name="return" description="The wrapped model resource" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="201" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="228" package="LibRDF">
        <name>addStatement</name>
        <full_name>addStatement</full_name>
        <docblock line="215">
          <description>Add a statement to the model.</description>
          <long-description>&lt;p&gt;A statement can be added more than once by adding it under different
contexts, otherwise adding a duplicate statement will have no effect.
Not all models support contexts.&lt;/p&gt;</long-description>
          <tag line="215" name="param" description="The statement to add" type="\LibRDF_Statement" variable="$statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="215" name="param" description="An optional context under which to add the statement" type="\LibRDF_URINode" variable="$context">
            <type by_reference="false">\LibRDF_URINode</type>
          </tag>
          <tag line="215" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="215" name="throws" description="If unable to add the statement" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="215" name="access" description="public"/>
        </docblock>
        <argument line="228">
          <name>$statement</name>
          <default/>
          <type>\LibRDF_Statement</type>
        </argument>
        <argument line="229">
          <name>$context</name>
          <default>NULL</default>
          <type>\LibRDF_URINode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="259" package="LibRDF">
        <name>removeStatement</name>
        <full_name>removeStatement</full_name>
        <docblock line="250">
          <description>Remove a statement from the model.</description>
          <long-description/>
          <tag line="250" name="param" description="The statement to remove" type="\LibRDF_Statement" variable="$statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="250" name="param" description="The context from which to remove the statement" type="\LibRDF_URINode" variable="$context">
            <type by_reference="false">\LibRDF_URINode</type>
          </tag>
          <tag line="250" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="250" name="throws" description="If unable to remove the statement" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="250" name="access" description="public"/>
        </docblock>
        <argument line="259">
          <name>$statement</name>
          <default/>
          <type>\LibRDF_Statement</type>
        </argument>
        <argument line="260">
          <name>$context</name>
          <default>NULL</default>
          <type>\LibRDF_URINode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="282" package="LibRDF">
        <name>size</name>
        <full_name>size</full_name>
        <docblock line="276">
          <description>Return the number of statements in the model.</description>
          <long-description/>
          <tag line="276" name="return" description="The number of statements" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="276" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="300" package="LibRDF">
        <name>getSource</name>
        <full_name>getSource</full_name>
        <docblock line="287">
          <description>Return a single source node that is part of a statement containing
the given predicate and target.</description>
          <long-description>&lt;p&gt;This function is equivalent to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$model-&gt;findStatements(NULL, $predicate, $target)-&gt;current()-&gt;getSubject()&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="287" name="param" description="The predicate node for which to search" type="\LibRDF_Node" variable="$arc">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="287" name="param" description="The target node for which to search" type="\LibRDF_Node" variable="$target">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="287" name="return" description="A node that matches the criteria" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="287" name="throws" description="If no statement with the given predicate and target is found" type="\LibRDF_LookupError">
            <type by_reference="false">\LibRDF_LookupError</type>
          </tag>
          <tag line="287" name="access" description="public"/>
        </docblock>
        <argument line="300">
          <name>$arc</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
        <argument line="300">
          <name>$target</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="321" package="LibRDF">
        <name>getSources</name>
        <full_name>getSources</full_name>
        <docblock line="311">
          <description>Return source nodes that are part of a statement containing the
given predicate and object.</description>
          <long-description/>
          <tag line="311" name="param" description="The arc node for which to search" type="\LibRDF_Node" variable="$arc">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="311" name="param" description="The target node for which to search" type="\LibRDF_Node" variable="$target">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="311" name="return" description="An iterator for nodes that matches the criteria" type="\LibRDF_Iterator">
            <type by_reference="false">\LibRDF_Iterator</type>
          </tag>
          <tag line="311" name="throws" description="If no statement with the given source and predicate is found" type="\LibRDF_LookupError">
            <type by_reference="false">\LibRDF_LookupError</type>
          </tag>
          <tag line="311" name="access" description="public"/>
        </docblock>
        <argument line="321">
          <name>$arc</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
        <argument line="321">
          <name>$target</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="345" package="LibRDF">
        <name>getArc</name>
        <full_name>getArc</full_name>
        <docblock line="332">
          <description>Return a single predicate node that is part of a statement containing
the given source and target.</description>
          <long-description>&lt;p&gt;This function is equivalent to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$model-&gt;findStatements($source, NULL, $target)-&gt;current()-&gt;getPredicate()&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="332" name="param" description="The source node for which to search" type="\LibRDF_Node" variable="$source">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="332" name="param" description="The target node for which to search" type="\LibRDF_Node" variable="$target">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="332" name="return" description="A node that matches the criteria" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="332" name="throws" description="If no statement with the given source and target is found" type="\LibRDF_LookupError">
            <type by_reference="false">\LibRDF_LookupError</type>
          </tag>
          <tag line="332" name="access" description="public"/>
        </docblock>
        <argument line="345">
          <name>$source</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
        <argument line="345">
          <name>$target</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="366" package="LibRDF">
        <name>getArcs</name>
        <full_name>getArcs</full_name>
        <docblock line="356">
          <description>Return arc nodes that are part of a statement containing the
given source and predicate.</description>
          <long-description/>
          <tag line="356" name="param" description="The source node for which to search" type="\LibRDF_Node" variable="$source">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="356" name="param" description="The target node for which to search" type="\LibRDF_Node" variable="$target">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="356" name="return" description="An iterator for nodes that matches the criteria" type="\LibRDF_Iterator">
            <type by_reference="false">\LibRDF_Iterator</type>
          </tag>
          <tag line="356" name="throws" description="If no statement with the given source and predicate is found" type="\LibRDF_LookupError">
            <type by_reference="false">\LibRDF_LookupError</type>
          </tag>
          <tag line="356" name="access" description="public"/>
        </docblock>
        <argument line="366">
          <name>$source</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
        <argument line="366">
          <name>$target</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="390" package="LibRDF">
        <name>getTarget</name>
        <full_name>getTarget</full_name>
        <docblock line="377">
          <description>Return a single target node that is part of a statement containing the
given source and predicate.</description>
          <long-description>&lt;p&gt;This function is equivalent to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$model-&gt;findStatements($source, $predicate, NULL)-&gt;current()-&gt;getTarget()&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="377" name="param" description="The source node for which to search" type="\LibRDF_Node" variable="$source">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="377" name="param" description="The predicate node for which to search" type="\LibRDF_Node" variable="$arc">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="377" name="return" description="A node that matches the criteria" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="377" name="throws" description="If no statement with the given source and predicate is found" type="\LibRDF_LookupError">
            <type by_reference="false">\LibRDF_LookupError</type>
          </tag>
          <tag line="377" name="access" description="public"/>
        </docblock>
        <argument line="390">
          <name>$source</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
        <argument line="390">
          <name>$arc</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="411" package="LibRDF">
        <name>getTargets</name>
        <full_name>getTargets</full_name>
        <docblock line="401">
          <description>Return target nodes that are part of a statement containing the
given source and predicate.</description>
          <long-description/>
          <tag line="401" name="param" description="The source node for which to search" type="\LibRDF_Node" variable="$source">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="401" name="param" description="The predicate node for which to search" type="\LibRDF_Node" variable="$arc">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="401" name="return" description="An iterator for nodes that matches the criteria" type="\LibRDF_Iterator">
            <type by_reference="false">\LibRDF_Iterator</type>
          </tag>
          <tag line="401" name="throws" description="If no statement with the given source and predicate is found" type="\LibRDF_LookupError">
            <type by_reference="false">\LibRDF_LookupError</type>
          </tag>
          <tag line="401" name="access" description="public"/>
        </docblock>
        <argument line="411">
          <name>$source</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
        <argument line="411">
          <name>$arc</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="429" package="LibRDF">
        <name>hasStatement</name>
        <full_name>hasStatement</full_name>
        <docblock line="422">
          <description>Test whether the model contains a statement.</description>
          <long-description/>
          <tag line="422" name="param" description="The statement for which to search" type="\LibRDF_Statement" variable="$statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="422" name="return" description="Whether such a statement exists in the graph" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="422" name="access" description="public"/>
        </docblock>
        <argument line="429">
          <name>$statement</name>
          <default/>
          <type>\LibRDF_Statement</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="461" package="LibRDF">
        <name>findStatements</name>
        <full_name>findStatements</full_name>
        <docblock line="439">
          <description>Find a statement in the model.</description>
          <long-description>&lt;p&gt;A NULL argument for any of source, predicate or target is treated as
a wildcard.  If a context is given, only statements from that context
will be returned.  The result is an object that be used in foreach
iteration.  The returned iterator cannot be rewound.&lt;/p&gt;

&lt;p&gt;The search arguments can be either a (source, predicate target) triple
of LibRDF_Node objects or a LibRDF_Statement object.  Valid argument
lists are (source, predicate, target, [context]) or
(statement, [context]).&lt;/p&gt;

&lt;p&gt;For more complex queries, see {@link LibRDF_Query}.&lt;/p&gt;</long-description>
          <tag line="439" name="param" description="The statement to match or a source node" type="mixed" variable="$statement">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="439" name="param" description="The predicate to match" type="\LibRDF_Node" variable="$predicate">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="439" name="param" description="The target to match" type="\LibRDF_Node" variable="$target">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="439" name="param" description="The context in which to search" type="\LibRDF_URINode" variable="$context">
            <type by_reference="false">\LibRDF_URINode</type>
          </tag>
          <tag line="439" name="return" description="An iterator over the matched statements" type="\LibRDF_StreamIterator">
            <type by_reference="false">\LibRDF_StreamIterator</type>
          </tag>
          <tag line="439" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="549" package="LibRDF">
        <name>resetIterator</name>
        <full_name>resetIterator</full_name>
        <docblock line="543">
          <description>Discard the current statement iterator and create a new one.</description>
          <long-description/>
          <tag line="543" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="543" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="564" package="LibRDF">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="558">
          <description>Reset the statement iterator.</description>
          <long-description/>
          <tag line="558" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="558" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="575" package="LibRDF">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="569">
          <description>Return the current statement on the iterator.</description>
          <long-description/>
          <tag line="569" name="return" description="The current statement" type="\LibRDF_Statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="569" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="587" package="LibRDF">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="581">
          <description>Return the current iteration key.</description>
          <long-description/>
          <tag line="581" name="return" description="The current key" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="581" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="599" package="LibRDF">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="593">
          <description>Advance the iterator's position.</description>
          <long-description/>
          <tag line="593" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="593" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="611" package="LibRDF">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="605">
          <description>Check whether the statement iterator is still valid.</description>
          <long-description/>
          <tag line="605" name="return" description="Whether the iterator is still valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="605" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="630" package="LibRDF">
        <name>loadStatementsFromString</name>
        <full_name>loadStatementsFromString</full_name>
        <docblock line="617">
          <description>Load statements using a {@link LibRDF_Parser}.</description>
          <long-description>&lt;p&gt;If no $base_uri is given, the RDF namespace URI will be used as the
base for relative URIs.&lt;/p&gt;</long-description>
          <tag line="617" name="param" description="The parser with which to parse the string" type="\LibRDF_Parser" variable="$parser">
            <type by_reference="false">\LibRDF_Parser</type>
          </tag>
          <tag line="617" name="param" description="The string to parse" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="617" name="param" description="The base URI to use for relative URIs in the string" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="617" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="617" name="throws" description="If unable to parse the string" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="617" name="access" description="public"/>
        </docblock>
        <argument line="630">
          <name>$parser</name>
          <default/>
          <type>\LibRDF_Parser</type>
        </argument>
        <argument line="631">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
        <argument line="631">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="657" package="LibRDF">
        <name>loadStatementsFromURI</name>
        <full_name>loadStatementsFromURI</full_name>
        <docblock line="647">
          <description>Load statements from a URI using a {@link LibRDF_Parser}.</description>
          <long-description/>
          <tag line="647" name="param" description="The parser with which to parse the URI's contents" type="\LibRDF_Parser" variable="$parser">
            <type by_reference="false">\LibRDF_Parser</type>
          </tag>
          <tag line="647" name="param" description="The URI with the contents to load" type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="647" name="param" description="The base URI to use for relative URIs if different from $uri" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="647" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="647" name="throws" description="If unable to parse the URI contents" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="647" name="access" description="public"/>
        </docblock>
        <argument line="657">
          <name>$parser</name>
          <default/>
          <type>\LibRDF_Parser</type>
        </argument>
        <argument line="658">
          <name>$uri</name>
          <default/>
          <type/>
        </argument>
        <argument line="658">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="687" package="LibRDF">
        <name>loadStatements</name>
        <full_name>loadStatements</full_name>
        <docblock line="678">
          <description>Load statements from a URI or string, detecting the necessary parser.</description>
          <long-description/>
          <tag line="678" name="param" description="The URI or string with the contents to load" type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
          <tag line="678" name="param" description="The base URI to use for relative URIs" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="678" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="678" name="throws" description="If unable to parse the contents" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="678" name="access" description="public"/>
        </docblock>
        <argument line="687">
          <name>$content</name>
          <default/>
          <type/>
        </argument>
        <argument line="687">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="727" package="LibRDF">
        <name>serializeStatements</name>
        <full_name>serializeStatements</full_name>
        <docblock line="718">
          <description>Serialize the model as a string.</description>
          <long-description/>
          <tag line="718" name="param" description="The serializer to use" type="\LibRDF_Serializer" variable="$serializer">
            <type by_reference="false">\LibRDF_Serializer</type>
          </tag>
          <tag line="718" name="param" description="The base URI to use if relative URIs are desired" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="718" name="return" description="The model as a string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="718" name="throws" description="If unable to serialize the model" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="718" name="access" description="public"/>
        </docblock>
        <argument line="727">
          <name>$serializer</name>
          <default/>
          <type>\LibRDF_Serializer</type>
        </argument>
        <argument line="728">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="754" package="LibRDF">
        <name>serializeStatementsToFile</name>
        <full_name>serializeStatementsToFile</full_name>
        <docblock line="744">
          <description>Serialize the model and write the contents to a file.</description>
          <long-description/>
          <tag line="744" name="param" description="The serializer to use" type="\LibRDF_Serializer" variable="$serializer">
            <type by_reference="false">\LibRDF_Serializer</type>
          </tag>
          <tag line="744" name="param" description="The name of the file to which to write" type="string" variable="$file_name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="744" name="param" description="The base URI to use" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="744" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="744" name="throws" description="If unable to serialize the model" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="744" name="access" description="public"/>
        </docblock>
        <argument line="754">
          <name>$serializer</name>
          <default/>
          <type>\LibRDF_Serializer</type>
        </argument>
        <argument line="755">
          <name>$file_name</name>
          <default/>
          <type/>
        </argument>
        <argument line="755">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="775" package="LibRDF">
        <name>getListAsArray</name>
        <full_name>getListAsArray</full_name>
        <docblock line="769">
          <description>Turns an RDF list into an ordered PHP array.</description>
          <long-description/>
          <tag line="769" name="param" description="The head of the list." type="\LibRDF_Node" variable="$head">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="769" name="return" description="The list as an array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="775">
          <name>$head</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <notice line="439" code="50013">Parameter $statement could not be found in findStatements()</notice>
      <notice line="439" code="50013">Parameter $predicate could not be found in findStatements()</notice>
      <notice line="439" code="50013">Parameter $target could not be found in findStatements()</notice>
      <notice line="439" code="50013">Parameter $context could not be found in findStatements()</notice>
    </parse_markers>
  </file>
  <file path="lib/LibRDF/StreamIterator.php" hash="681c5a40b4414b53420c4d9acf7c8f38" package="LibRDF">
    <docblock line="2">
      <description>Wrap a librdf_stream as a PHP iterator using SPL.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="LibRDF"/>
      <tag line="2" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="2" name="copyright" description="2006 David Shea"/>
      <tag line="2" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="2" name="version" description="Release: 1.0.0"/>
      <tag line="2" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="34" type="Require Once" package="Default">
      <name/>
      <docblock line="32">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="55" package="LibRDF">
      <extends/>
      <implements>\Iterator</implements>
      <name>LibRDF_StreamIterator</name>
      <full_name>\LibRDF_StreamIterator</full_name>
      <docblock line="36">
        <description>Wrap a librdf_stream resource as an iterable object.</description>
        <long-description>&lt;p&gt;This class should not be created directly, nor are its methods of interest
to the casual user.  Its only intent is to provide a return type for
LibRDF_Model::find_statements, as well as the underlying iterator for both
LibRDF_Model and LibRDF_GraphQueryResults, that can then be used in a PHP
foreach statement without any direct function calls.&lt;/p&gt;

&lt;p&gt;Objects of this type may only be used for iteration once.  Once iteration
has begun, a call to rewind will render the object invalid.&lt;/p&gt;</long-description>
        <tag line="36" name="package" description="LibRDF"/>
        <tag line="36" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="36" name="copyright" description="2006 David Shea"/>
        <tag line="36" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="36" name="version" description="Release: 1.0.0"/>
        <tag line="36" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="63" namespace="global" package="Default">
        <name>$isvalid</name>
        <default/>
        <docblock line="57">
          <description>A cache of whether the iterator is still valid.</description>
          <long-description/>
          <tag line="57" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="57" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="71" namespace="global" package="Default">
        <name>$stream</name>
        <default/>
        <docblock line="65">
          <description>The underlying librdf_stream resource.</description>
          <long-description/>
          <tag line="65" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="65" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="83" namespace="global" package="Default">
        <name>$key</name>
        <default/>
        <docblock line="73">
          <description>An integer used to provide keys over the iteration.</description>
          <long-description>&lt;p&gt;There are no keys created by the librdf_stream data, so iteration
keys are created as an integer with an initial value of 0 increasing
by one for each call of {@link next}.&lt;/p&gt;</long-description>
          <tag line="73" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="73" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="92" namespace="global" package="Default">
        <name>$source</name>
        <default/>
        <docblock line="85">
          <description>A reference to the stream's source object to prevent it from being
garbage collected before the stream.</description>
          <long-description/>
          <tag line="85" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="85" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="103" namespace="global" package="Default">
        <name>$rewindable</name>
        <default/>
        <docblock line="94">
          <description>A flag for whether the stream is rewindable.</description>
          <long-description>&lt;p&gt;A stream may be rewound before {@link next} is called, after which
rewinding invalidates the stream.&lt;/p&gt;</long-description>
          <tag line="94" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="94" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="117" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="105">
          <description>Create a new iterable object from a librdf_stream resource.</description>
          <long-description>&lt;p&gt;User functions should not create librdf_stream resources directly,
so this constructor is intended only to provide an interface into the
streams returned by librdf functions and called by LibRDF classes.&lt;/p&gt;</long-description>
          <tag line="105" name="param" description="The librdf_stream object to wrap" type="resource" variable="$stream">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="105" name="param" description="The object that created the stream" type="mixed" variable="$source">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="105" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="105" name="access" description="public"/>
        </docblock>
        <argument line="117">
          <name>$stream</name>
          <default/>
          <type/>
        </argument>
        <argument line="117">
          <name>$source</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="126">
          <description>Free the stream's resources.</description>
          <long-description/>
          <tag line="126" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="126" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="148" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="139">
          <description>Clone a LibRDF_StreamIterator object.</description>
          <long-description>&lt;p&gt;Cloning a stream is unsupported, so using the clone operator on a
LibRDF_StreamIterator object will produce an empty iterator.&lt;/p&gt;</long-description>
          <tag line="139" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="139" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="163" package="LibRDF">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="154">
          <description>Rewind the stream.</description>
          <long-description>&lt;p&gt;Rewinding is not supported, so this call invalidates the stream unless
the stream is still at the starting position.&lt;/p&gt;</long-description>
          <tag line="154" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="154" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="176" package="LibRDF">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="170">
          <description>Return the current statement or NULL if the stream is no longer valid.</description>
          <long-description/>
          <tag line="170" name="return" description="The current statement on the iterator" type="\LibRDF_Statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="170" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="198" package="LibRDF">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="192">
          <description>Return the key of the current element on the stream.</description>
          <long-description/>
          <tag line="192" name="return" description="The current key" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="192" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="209" package="LibRDF">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="203">
          <description>Advance the stream's position.</description>
          <long-description/>
          <tag line="203" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="203" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="228" package="LibRDF">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="222">
          <description>Return whether the stream is still valid.</description>
          <long-description/>
          <tag line="222" name="return" description="Whether the stream is still valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="222" name="access" description="public"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="lib/LibRDF/URI.php" hash="2e0e76edc214edef48ff4c37d5c75463" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_URI, a representation of a resource in a world.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="35" type="Require Once" package="Default">
      <name/>
      <docblock line="33">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="54" package="LibRDF">
      <extends/>
      <name>LibRDF_URI</name>
      <full_name>\LibRDF_URI</full_name>
      <docblock line="37">
        <description>A wrapper around the librdf_uri datatype.</description>
        <long-description>&lt;p&gt;There is no need to use this class directly, as all LibRDF classes infer
whether or not a librdf_uri is needed from context; all the functions that
use librdf_uri internally take strings as arguments for the sake of
making things easier for the user.  This class exists mainly to make
error handling and garbage collection of librdf_uri resources more
convenient internally for the LibRDF classes.&lt;/p&gt;</long-description>
        <tag line="37" name="package" description="LibRDF"/>
        <tag line="37" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="37" name="copyright" description="2006 David Shea"/>
        <tag line="37" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="37" name="version" description="Release: 1.0.0"/>
        <tag line="37" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="62" namespace="global" package="Default">
        <name>$uri</name>
        <default/>
        <docblock line="56">
          <description>The underlying librdf_uri resource.</description>
          <long-description/>
          <tag line="56" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="56" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="72" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="64">
          <description>Create a new URI object from a string.</description>
          <long-description/>
          <tag line="64" name="param" description="The string to use for the URI" type="string" variable="$uri_string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="64" name="throws" description="If unable to create a new URI" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="64" name="access" description="public"/>
        </docblock>
        <argument line="72">
          <name>$uri_string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="87" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="81">
          <description>Free the URI's resources.</description>
          <long-description/>
          <tag line="81" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="81" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="100" package="LibRDF">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="94">
          <description>Return the string representation of the URI.</description>
          <long-description/>
          <tag line="94" name="return" description="The URI string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="94" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="105">
          <description>Create a new URI object from an existing URI.</description>
          <long-description/>
          <tag line="105" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="105" name="throws" description="If unable to copy the URI" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="105" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="130" package="LibRDF">
        <name>getURI</name>
        <full_name>getURI</full_name>
        <docblock line="121">
          <description>Return the underlying URI resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and should not
be called.&lt;/p&gt;</long-description>
          <tag line="121" name="return" description="The URI resource" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="121" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="142" package="LibRDF">
        <name>isEqual</name>
        <full_name>isEqual</full_name>
        <docblock line="135">
          <description>Compare this URI against another URI for equality.</description>
          <long-description/>
          <tag line="135" name="param" description="The URI against which to compare" type="\LibRDF_URI" variable="$uri">
            <type by_reference="false">\LibRDF_URI</type>
          </tag>
          <tag line="135" name="return" description="Whether the two URIs are equal" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="135" name="access" description="public"/>
        </docblock>
        <argument line="142">
          <name>$uri</name>
          <default/>
          <type>\LibRDF_URI</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib/LibRDF/Statement.php" hash="98d2b584bffa4b38e207318d59564d8f" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Statement, a representation of a single triple.</description>
      <long-description>&lt;p&gt;Statements are a pair of nodes and an arc.  Both nodes and the arc are
represented as {@link LibRDF_Node} objects.  Statements are collected into
a graph using {@link LibRDF_Model}.&lt;/p&gt;

&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="39" type="Require Once" package="Default">
      <name/>
      <docblock line="37">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="40" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="52" package="LibRDF">
      <extends/>
      <name>LibRDF_Statement</name>
      <full_name>\LibRDF_Statement</full_name>
      <docblock line="42">
        <description>A wrapper around the librdf_statement datatype.</description>
        <long-description/>
        <tag line="42" name="package" description="LibRDF"/>
        <tag line="42" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="42" name="copyright" description="2006 David Shea"/>
        <tag line="42" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="42" name="version" description="Release: 1.0.0"/>
        <tag line="42" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="60" namespace="global" package="Default">
        <name>$statement</name>
        <default/>
        <docblock line="54">
          <description>The wrapped librdf_statement resource.</description>
          <long-description/>
          <tag line="54" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="54" name="access" description="public"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="75" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="62">
          <description>Create a new Statement.</description>
          <long-description>&lt;p&gt;The subject must be either a URINode or a BlankNode.  The predicate
must be a URINode.&lt;/p&gt;</long-description>
          <tag line="62" name="param" description="The librdf_statement to copy or the source Node of a statement" type="mixed" variable="$statement">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="62" name="param" description="The statement's predicate" type="\LibRDF_Node" variable="$predicate">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="62" name="param" description="The statement's object" type="\LibRDF_Node" variable="$object">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="62" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="62" name="throws" description="If unable to create a new statement" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="62" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="108">
          <description>Free a Statement's resources.</description>
          <long-description/>
          <tag line="108" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="108" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="127" package="LibRDF">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="121">
          <description>Return a string representation of a statement</description>
          <long-description/>
          <tag line="121" name="return" description="The statement as a string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="121" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="146" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="139">
          <description>Clone a Statement</description>
          <long-description/>
          <tag line="139" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="139" name="throws" description="If unable to create a new statement" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="139" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="164" package="LibRDF">
        <name>getStatement</name>
        <full_name>getStatement</full_name>
        <docblock line="155">
          <description>Get the underlying librdf_statement resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and should not
be called.&lt;/p&gt;</long-description>
          <tag line="155" name="return" description="The wrapped librdf_statement" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="155" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="175" package="LibRDF">
        <name>getSubject</name>
        <full_name>getSubject</full_name>
        <docblock line="169">
          <description>Get the statement's subject.</description>
          <long-description/>
          <tag line="169" name="return" description="The statement's subject" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="169" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="190" package="LibRDF">
        <name>getPredicate</name>
        <full_name>getPredicate</full_name>
        <docblock line="184">
          <description>Get the statement's predicate</description>
          <long-description/>
          <tag line="184" name="return" description="The statement's predicate" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="184" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="203" package="LibRDF">
        <name>getObject</name>
        <full_name>getObject</full_name>
        <docblock line="197">
          <description>Get the statement's object.</description>
          <long-description/>
          <tag line="197" name="return" description="The statement's object" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="197" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="220" package="LibRDF">
        <name>isEqual</name>
        <full_name>isEqual</full_name>
        <docblock line="210">
          <description>Compare this statement with another statement.</description>
          <long-description>&lt;p&gt;Two statements are equal if each of the three nodes in a statement
are equal to the corresponding nodes in the other statement.&lt;/p&gt;</long-description>
          <tag line="210" name="param" description="The statement against which to compare" type="\LibRDF_Statement" variable="$statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="210" name="return" description="Whether the statements are equal" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="210" name="access" description="public"/>
        </docblock>
        <argument line="220">
          <name>$statement</name>
          <default/>
          <type>\LibRDF_Statement</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <notice line="62" code="50013">Parameter $statement could not be found in __construct()</notice>
      <notice line="62" code="50013">Parameter $predicate could not be found in __construct()</notice>
      <notice line="62" code="50013">Parameter $object could not be found in __construct()</notice>
    </parse_markers>
  </file>
  <file path="lib/LibRDF/Iterator.php" hash="e42c269912def8d76c59a369deb10a6d" package="LibRDF">
    <docblock line="2">
      <description>Wrap a librdf_iterator as a PHP iterator using SPL.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="LibRDF"/>
      <tag line="2" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="2" name="copyright" description="2006 David Shea"/>
      <tag line="2" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="2" name="version" description="Release: 1.0.0"/>
      <tag line="2" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="34" type="Require Once" package="Default">
      <name/>
      <docblock line="32">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="50" package="LibRDF">
      <extends/>
      <implements>\Iterator</implements>
      <name>LibRDF_Iterator</name>
      <full_name>\LibRDF_Iterator</full_name>
      <docblock line="36">
        <description>Wrap a librdf_iterator resource as an iterable object.</description>
        <long-description>&lt;p&gt;Objects of this type may only be used for iteration once.  Once iteration
has begun, a call to rewind will render the object invalid.&lt;/p&gt;</long-description>
        <tag line="36" name="package" description="LibRDF"/>
        <tag line="36" name="author" description="Felix Ostrowski &lt;felix.ostrowski@googlemail.com&gt;"/>
        <tag line="36" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="36" name="copyright" description="2006 David Shea, 2012 Felix Ostrowski"/>
        <tag line="36" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="36" name="version" description="Release: 1.0.0"/>
        <tag line="36" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="58" namespace="global" package="Default">
        <name>$isvalid</name>
        <default/>
        <docblock line="52">
          <description>A cache of whether the iterator is still valid.</description>
          <long-description/>
          <tag line="52" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="52" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="66" namespace="global" package="Default">
        <name>$iterator</name>
        <default/>
        <docblock line="60">
          <description>The underlying librdf_iterator resource.</description>
          <long-description/>
          <tag line="60" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="60" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="78" namespace="global" package="Default">
        <name>$key</name>
        <default/>
        <docblock line="68">
          <description>An integer used to provide keys over the iteration.</description>
          <long-description>&lt;p&gt;There are no keys created by the librdf_iterator data, so iteration
keys are created as an integer with an initial value of 0 increasing
by one for each call of {@link next}.&lt;/p&gt;</long-description>
          <tag line="68" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="68" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="87" namespace="global" package="Default">
        <name>$source</name>
        <default/>
        <docblock line="80">
          <description>A reference to the iterator's source object to prevent it from being
garbage collected before the iterator.</description>
          <long-description/>
          <tag line="80" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="80" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="98" namespace="global" package="Default">
        <name>$rewindable</name>
        <default/>
        <docblock line="89">
          <description>A flag for whether the iterator is rewindable.</description>
          <long-description>&lt;p&gt;A iterator may be rewound before {@link next} is called, after which
rewinding invalidates the iterator.&lt;/p&gt;</long-description>
          <tag line="89" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="89" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="100">
          <description>Create a new iterable object from a librdf_iterator resource.</description>
          <long-description>&lt;p&gt;User functions should not create librdf_iterator resources directly,
so this constructor is intended only to provide an interface into the
iterators returned by librdf functions and called by LibRDF classes.&lt;/p&gt;</long-description>
          <tag line="100" name="param" description="The librdf_iterator object to wrap" type="resource" variable="$iterator">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="100" name="param" description="The object that created the iterator" type="mixed" variable="$source">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="100" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="100" name="access" description="public"/>
        </docblock>
        <argument line="112">
          <name>$iterator</name>
          <default/>
          <type/>
        </argument>
        <argument line="112">
          <name>$source</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="127" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="121">
          <description>Free the iterator's resources.</description>
          <long-description/>
          <tag line="121" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="121" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="143" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="134">
          <description>Clone a LibRDF_Iterator object.</description>
          <long-description>&lt;p&gt;Cloning a iterator is unsupported, so using the clone operator on a
LibRDF_Iterator object will produce an empty iterator.&lt;/p&gt;</long-description>
          <tag line="134" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="134" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="158" package="LibRDF">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="149">
          <description>Rewind the iterator.</description>
          <long-description>&lt;p&gt;Rewinding is not supported, so this call invalidates the iterator unless
the iterator is still at the starting position.&lt;/p&gt;</long-description>
          <tag line="149" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="149" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="171" package="LibRDF">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="165">
          <description>Return the current node or NULL if the iterator is no longer valid.</description>
          <long-description/>
          <tag line="165" name="return" description="The current node on the iterator" type="\LibRDF_Statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="165" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="193" package="LibRDF">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="187">
          <description>Return the key of the current element on the iterator.</description>
          <long-description/>
          <tag line="187" name="return" description="The current key" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="187" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="204" package="LibRDF">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="198">
          <description>Advance the iterator's position.</description>
          <long-description/>
          <tag line="198" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="198" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="223" package="LibRDF">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="217">
          <description>Return whether the iterator is still valid.</description>
          <long-description/>
          <tag line="217" name="return" description="Whether the iterator is still valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="217" name="access" description="public"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ontologies/sparql.php" hash="d317eb018968c949a83dc220fcb4d359" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name>lib/LibRDF/LibRDF.php</name>
    </include>
    <function namespace="global" line="5" package="Default">
      <name>query</name>
      <full_name>\query</full_name>
      <argument line="5">
        <name>$person</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="266" package="Default">
      <name>formatSet</name>
      <full_name>\formatSet</full_name>
      <argument line="266">
        <name>$string</name>
        <default/>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ontologies/sparql.php</error>
      <error line="5" code="50009">No DocBlock was found for function \query()</error>
      <error line="266" code="50009">No DocBlock was found for function \formatSet()</error>
    </parse_markers>
  </file>
  <file path="index.php" hash="863a6982ec42f6fe2608ee106ee55336" package="Default">
    <include line="97" type="Require Once" package="Default">
      <name>ontologies/sparql.php</name>
    </include>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file index.php</error>
    </parse_markers>
  </file>
  <file path="public/lib/LibRDF/LibRDF.php" hash="fce26e671a43fd701b7a3e30a5b119a2" package="LibRDF">
    <docblock line="3">
      <description>Constants and default includes for the LibRDF package.</description>
      <long-description>&lt;p&gt;This file can be included by code using the LibRDF package to include
all necessary classes.&lt;/p&gt;

&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="38" type="Require Once" package="Default">
      <name/>
      <docblock line="36">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="39" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="40" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="41" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="42" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="43" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="44" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="45" type="Require Once" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="50" package="LibRDF">
      <name>RDF_BASE_URI</name>
      <full_name>\RDF_BASE_URI</full_name>
      <value>"http://www.w3.org/1999/02/22-rdf-syntax-ns#"</value>
    </constant>
  </file>
  <file path="public/lib/LibRDF/Node.php" hash="2f5b6dc94d4ed2f08a72bb03456ddf38" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Node, a node or arc in an RDF graph.</description>
      <long-description>&lt;p&gt;A LibRDF_Node is the type of the {@link LibRDF_Statement} triples.&lt;/p&gt;

&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="37" type="Require Once" package="Default">
      <name/>
      <docblock line="35">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="38" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="true" namespace="global" line="55" package="LibRDF">
      <extends/>
      <name>LibRDF_Node</name>
      <full_name>\LibRDF_Node</full_name>
      <docblock line="40">
        <description>A wrapper around the librdf_node datatype.</description>
        <long-description>&lt;p&gt;The values of nodes come from three potential, disjoint sets: URIs,
literal strings and blank identifiers.  These types are represented by
{@link LibRDF_URINode}, {@link LibRDF_LiteralNode} and
{@link LibRDF_BlankNode}, respectively.&lt;/p&gt;</long-description>
        <tag line="40" name="package" description="LibRDF"/>
        <tag line="40" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="40" name="copyright" description="2006 David Shea"/>
        <tag line="40" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="40" name="version" description="Release: 1.0.0"/>
        <tag line="40" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="65" namespace="global" package="Default">
        <name>$node</name>
        <default/>
        <docblock line="57">
          <description>The underlying librdf_node resource.</description>
          <long-description>&lt;p&gt;This value must be set by the constructors for the concrete node types.&lt;/p&gt;</long-description>
          <tag line="57" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="57" name="access" description="protected"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="67">
          <description>Destroy the Node object.</description>
          <long-description/>
          <tag line="67" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="67" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="87" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="80">
          <description>Create a new node object from an existing node.</description>
          <long-description/>
          <tag line="80" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="80" name="throws" description="If unable to copy the node" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="80" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="102" package="LibRDF">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="96">
          <description>Return a string representation of the node.</description>
          <long-description/>
          <tag line="96" name="return" description="A string representation of the node" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="129" package="LibRDF">
        <name>isEqual</name>
        <full_name>isEqual</full_name>
        <docblock line="117">
          <description>Compare this node with another node for equality.</description>
          <long-description>&lt;p&gt;Nodes of different types are not equal; thus, a URI of
http://example.org/ and a literal string of http://example.org are not
equal, even though they contain the same string.  Similarly, literal
nodes must match in both type and language to be considered equal.&lt;/p&gt;</long-description>
          <tag line="117" name="param" description="The node against which to compare" type="\LibRDF_Node" variable="$node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="117" name="return" description="Whether the nodes are equal" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="117" name="access" description="public"/>
        </docblock>
        <argument line="129">
          <name>$node</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="143" package="LibRDF">
        <name>getNode</name>
        <full_name>getNode</full_name>
        <docblock line="134">
          <description>Return the underlying librdf_node resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and should not
be called.&lt;/p&gt;</long-description>
          <tag line="134" name="return" description="The wrapped node" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="134" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="161" package="LibRDF">
        <name>makeNode</name>
        <full_name>makeNode</full_name>
        <docblock line="148">
          <description>Wrap a librdf_node resource in the correct Node object.</description>
          <long-description>&lt;p&gt;This function is intended for use by LibRDF classes, allowing them
to easily convert a librdf_node resource into the correct type of
LibRDF_Node object.&lt;/p&gt;</long-description>
          <tag line="148" name="param" description="The librdf_node to convert" type="resource" variable="$node">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="148" name="return" description="A concrete object implementing Node" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="148" name="throws" description="If unable to create a new node" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="148" name="access" description="public"/>
          <tag line="148" name="static" description=""/>
        </docblock>
        <argument line="161">
          <name>$node</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="189" package="LibRDF">
      <extends>\LibRDF_Node</extends>
      <name>LibRDF_URINode</name>
      <full_name>\LibRDF_URINode</full_name>
      <docblock line="179">
        <description>A specialized version of {@link LibRDF_Node} representing a URI.</description>
        <long-description/>
        <tag line="179" name="package" description="LibRDF"/>
        <tag line="179" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="179" name="copyright" description="2006 David Shea"/>
        <tag line="179" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="179" name="version" description="Release: 1.0.0"/>
        <tag line="179" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="199" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="191">
          <description>Create a new URINode from a URI object.</description>
          <long-description/>
          <tag line="191" name="param" description="The URI string or librdf_node value to use" type="mixed" variable="$uri">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="191" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="191" name="throws" description="If unable to create a new URI" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="191" name="access" description="public"/>
        </docblock>
        <argument line="199">
          <name>$uri</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="219" package="Default">
      <extends>\LibRDF_URINode</extends>
      <name>LibRDF_NS</name>
      <full_name>\LibRDF_NS</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="227" package="Default">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="221">
          <description>Return a new URINode based on this one</description>
          <long-description/>
          <tag line="221" name="return" description="" type="\LibRDF_URINode">
            <type by_reference="false">\LibRDF_URINode</type>
          </tag>
          <tag line="221" name="access" description="public"/>
        </docblock>
        <argument line="227">
          <name>$localPart</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="245" package="LibRDF">
      <extends>\LibRDF_Node</extends>
      <name>LibRDF_BlankNode</name>
      <full_name>\LibRDF_BlankNode</full_name>
      <docblock line="235">
        <description>A representation of a blank node.</description>
        <long-description/>
        <tag line="235" name="package" description="LibRDF"/>
        <tag line="235" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="235" name="copyright" description="2006 David Shea"/>
        <tag line="235" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="235" name="version" description="Release: 1.0.0"/>
        <tag line="235" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="255" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="247">
          <description>Create a new blank node with an optional identifier.</description>
          <long-description/>
          <tag line="247" name="param" description="The nodeId value or librdf_node resource" type="mixed" variable="$nodeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="247" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="247" name="throws" description="If unable to create a new node" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="247" name="access" description="public"/>
        </docblock>
        <argument line="255">
          <name>$nodeId</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="291" package="LibRDF">
      <extends>\LibRDF_Node</extends>
      <name>LibRDF_LiteralNode</name>
      <full_name>\LibRDF_LiteralNode</full_name>
      <docblock line="279">
        <description>A representation of a literal node.</description>
        <long-description>&lt;p&gt;Literal nodes can have a type and a language, but not both.&lt;/p&gt;</long-description>
        <tag line="279" name="package" description="LibRDF"/>
        <tag line="279" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="279" name="copyright" description="2006 David Shea"/>
        <tag line="279" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="279" name="version" description="Release: 1.0.0"/>
        <tag line="279" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="421" namespace="global" package="Default">
        <name>$plainOutput</name>
        <default>false</default>
        <docblock line="417">
          <description>Whether to append datatype / language
to output of __toString</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="312" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="294">
          <description>Create a new Literal node.</description>
          <long-description>&lt;p&gt;Both the $language and $datatype parameters are optional.&lt;/p&gt;

&lt;p&gt;The value of the literal node can either be a string or an XML literal
in the form of a DOMNodeList object.  If using XML, a datatype of
http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral is implied, so
the datatype parameter cannot be used with XML.  A literal cannot have
both a language and a datatype.&lt;/p&gt;</long-description>
          <tag line="294" name="param" description="The literal value, either a string, a DOMNodeList or a librdf_node resource" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="294" name="param" description="An optional datatype URI for the literal value" type="string" variable="$datatype">
            <type by_reference="false">string</type>
          </tag>
          <tag line="294" name="param" description="An option language for the literal value" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
          <tag line="294" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="294" name="throws" description="If unabel to create a new node" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="294" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="395" package="LibRDF">
        <name>getDatatype</name>
        <full_name>getDatatype</full_name>
        <docblock line="389">
          <description>Return the datattype URI or NULL if this literal has no datatype.</description>
          <long-description/>
          <tag line="389" name="return" description="The datatype URI" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="389" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="412" package="LibRDF">
        <name>getLanguage</name>
        <full_name>getLanguage</full_name>
        <docblock line="405">
          <description>Return the language of this literal or NULL if the literal has no
language.</description>
          <long-description/>
          <tag line="405" name="return" description="The literal's language" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="405" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="426" package="LibRDF">
        <name>setPlainOutput</name>
        <full_name>setPlainOutput</full_name>
        <docblock line="423">
          <description/>
          <long-description/>
          <tag line="423" name="param" description="" type="bool" variable="$plain">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="426">
          <name>$plain</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="437" package="LibRDF">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="431">
          <description>Return a string representation of the node.</description>
          <long-description/>
          <tag line="431" name="return" description="A string representation of the node" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="431" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="219" code="50000">No DocBlock was found for \LibRDF_NS</error>
      <error line="221" code="50015">Argument $localPart is missing from the Docblock of __get()</error>
      <notice line="294" code="50013">Parameter $value could not be found in __construct()</notice>
      <notice line="294" code="50013">Parameter $datatype could not be found in __construct()</notice>
      <notice line="294" code="50013">Parameter $language could not be found in __construct()</notice>
      <error line="423" code="50012">No short description for method setPlainOutput()</error>
    </parse_markers>
  </file>
  <file path="public/lib/LibRDF/Error.php" hash="21cc5c8d7ac2d4f0e7e9f129cf326e3d" package="LibRDF">
    <docblock line="3">
      <description>Exceptions used by the LibRDF classes.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="49" package="LibRDF">
      <extends>\Exception</extends>
      <name>LibRDF_Error</name>
      <full_name>\LibRDF_Error</full_name>
      <docblock line="33">
        <description>The exception type used for LibRDF runtime errors.</description>
        <long-description>&lt;p&gt;An object of this type is thrown when a runtime error is encountered in the
PHP wrapper to the librdf wrapper though, in actuality, it is rarely used.
Runtime errors are more often expressed through the librdf extension
itself which, instead of throwing an exception, will produce a E_ERROR
message and halt the program.&lt;/p&gt;</long-description>
        <tag line="33" name="package" description="LibRDF"/>
        <tag line="33" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="33" name="copyright" description="2006 David Shea"/>
        <tag line="33" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="33" name="version" description="Release: 1.0.0"/>
        <tag line="33" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="51">
          <description>Create a new LibRDF_Error.</description>
          <long-description/>
          <tag line="51" name="param" description="The error message to use" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="51" name="access" description="public"/>
        </docblock>
        <argument line="58">
          <name>$message</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="public/lib/LibRDF/Query.php" hash="317c7aae92e8182eaf77f6ab1f804445" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Query, a representation of a query against a LibRDF_Model.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="35" type="Require Once" package="Default">
      <name/>
      <docblock line="33">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="36" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="37" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="54" package="LibRDF">
      <extends/>
      <name>LibRDF_Query</name>
      <full_name>\LibRDF_Query</full_name>
      <docblock line="39">
        <description>A wrapper around the librdf_query datatype.</description>
        <long-description>&lt;p&gt;A query is created independent of any context and is then executed, using
{@link execute}, against a particular model.  A query can be executed
multiple times and against multiple models.  Results are represented as
a {@link LibRDF_QueryResults} object.&lt;/p&gt;</long-description>
        <tag line="39" name="package" description="LibRDF"/>
        <tag line="39" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="39" name="copyright" description="2006 David Shea"/>
        <tag line="39" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="39" name="version" description="Release: 1.0.0"/>
        <tag line="39" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="62" namespace="global" package="Default">
        <name>$query</name>
        <default/>
        <docblock line="56">
          <description>The underlying librdf_query resource.</description>
          <long-description/>
          <tag line="56" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="56" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="80" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="64">
          <description>Create a new query.</description>
          <long-description>&lt;p&gt;Query language is any language supported by rasqal, including "rdql",
"sparql" and "triples".&lt;/p&gt;

&lt;p&gt;The syntax of the query is not checked until it is executed.&lt;/p&gt;</long-description>
          <tag line="64" name="param" description="The contents of the query" type="string" variable="$query_string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="The base URI to use" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="The language of the query (default rdql)" type="string" variable="$query_language">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="The URI of the query language or NULL" type="string" variable="$query_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="64" name="throws" description="If unable to create a new query" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="64" name="access" description="public"/>
        </docblock>
        <argument line="80">
          <name>$query_string</name>
          <default/>
          <type/>
        </argument>
        <argument line="80">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="81">
          <name>$query_language</name>
          <default>"rdql"</default>
          <type/>
        </argument>
        <argument line="81">
          <name>$query_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="100">
          <description>Free the query resources.</description>
          <long-description/>
          <tag line="100" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="100" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="122" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="113">
          <description>Clone the query.</description>
          <long-description>&lt;p&gt;Cloning may not be supported for all query types.&lt;/p&gt;</long-description>
          <tag line="113" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="113" name="throws" description="If unable to clone the query" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="113" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="LibRDF">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="131">
          <description>Run the query against a model.</description>
          <long-description/>
          <tag line="131" name="param" description="The model to query" type="\LibRDF_Model" variable="$model">
            <type by_reference="false">\LibRDF_Model</type>
          </tag>
          <tag line="131" name="return" description="The result of the query" type="\LibRDF_QueryResults">
            <type by_reference="false">\LibRDF_QueryResults</type>
          </tag>
          <tag line="131" name="throws" description="If unable to execute the query" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="131" name="access" description="public"/>
        </docblock>
        <argument line="139">
          <name>$model</name>
          <default/>
          <type>\LibRDF_Model</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="public/lib/LibRDF/ARC2_getFormat.php" hash="8a2aaa08bfbdc0820700ee550e34056e" package="ARC2">
    <docblock line="2">
      <description>ARC2 format detection function</description>
      <long-description/>
      <tag line="2" name="author" description="Benjamin Nowack &lt;bnowack@semsol.com&gt;"/>
      <tag line="2" name="license" description="http://arc.semsol.org/license"/>
      <tag line="2" name="package" description="ARC2"/>
      <tag line="2" name="version" description="2010-01-18"/>
    </docblock>
    <function namespace="global" line="11" package="ARC2">
      <name>ARC2_getFormat</name>
      <full_name>\ARC2_getFormat</full_name>
      <argument line="11">
        <name>$v</name>
        <default/>
        <type/>
      </argument>
      <argument line="11">
        <name>$mtype</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="11">
        <name>$ext</name>
        <default>''</default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <error line="11" code="50009">No DocBlock was found for function \ARC2_getFormat()</error>
    </parse_markers>
  </file>
  <file path="public/lib/LibRDF/Serializer.php" hash="1a454424457011992029149c7e7bca17" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Serializer, a wrapper around librdf_serializer.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="35" type="Require Once" package="Default">
      <name/>
      <docblock line="33">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="36" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="51" package="LibRDF">
      <extends/>
      <name>LibRDF_Serializer</name>
      <full_name>\LibRDF_Serializer</full_name>
      <docblock line="38">
        <description>A wrapper around the librdf_serializer datatype.</description>
        <long-description>&lt;p&gt;This class is used in conjunction with {@link LibRDF_Model} to produce
a serialization of a set of statements.&lt;/p&gt;</long-description>
        <tag line="38" name="package" description="LibRDF"/>
        <tag line="38" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="38" name="copyright" description="2006 David Shea"/>
        <tag line="38" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="38" name="version" description="Release: 1.0.0"/>
        <tag line="38" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="59" namespace="global" package="Default">
        <name>$serializer</name>
        <default/>
        <docblock line="53">
          <description>The underlying librdf_serializer resource.</description>
          <long-description/>
          <tag line="53" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="53" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="66" namespace="global" package="Default">
        <name>$namespaces</name>
        <default>array()</default>
        <docblock line="61">
          <description>Namespace mappings shared accross instances.</description>
          <long-description/>
          <tag line="61" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="68">
          <description>Create a new LibRDF_Serializer.</description>
          <long-description>&lt;p&gt;Name is the name of the serializer to use.  Common choices are
"rdfxml", "ntriples" and "turtle".&lt;/p&gt;

&lt;p&gt;The "rdfxml" serializer is not pretty, outputing a flat list of
one XML element per statement.  "rdfxml-abbrev" is a bit nicer, but
slower.&lt;/p&gt;</long-description>
          <tag line="68" name="param" description="The name of the serializer to use" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="The MIME type of the syntax" type="string" variable="$mime_type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="The URI of the syntax" type="string" variable="$type_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="68" name="throws" description="If unable to create a new serializer" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="68" name="access" description="public"/>
        </docblock>
        <argument line="85">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="85">
          <name>$mime_type</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="86">
          <name>$type_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="109" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="103">
          <description>Free the serializer's resources.</description>
          <long-description/>
          <tag line="103" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="103" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="125" package="LibRDF">
        <name>getSerializer</name>
        <full_name>getSerializer</full_name>
        <docblock line="116">
          <description>Return the wrapped librdf_serializer resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and should not
be called.&lt;/p&gt;</long-description>
          <tag line="116" name="return" description="The wrapper resource" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="116" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="LibRDF">
        <name>setNamespace</name>
        <full_name>setNamespace</full_name>
        <docblock line="130">
          <description>Set a prefix to URI mapping.</description>
          <long-description/>
          <tag line="130" name="param" description="The namespace URI" type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="130" name="param" description="The string prefix to use" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="130" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="130" name="throws" description="If unable to set the prefix" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="130" name="access" description="public"/>
        </docblock>
        <argument line="139">
          <name>$uri</name>
          <default/>
          <type/>
        </argument>
        <argument line="139">
          <name>$prefix</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="156" package="LibRDF">
        <name>setNamespaces</name>
        <full_name>setNamespaces</full_name>
        <docblock line="150">
          <description>Set namespace mappings on class level.</description>
          <long-description/>
          <tag line="150" name="param" description="" type="array" variable="$map">
            <type by_reference="false">array</type>
          </tag>
          <tag line="150" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$map</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="public/lib/LibRDF/Parser.php" hash="90ecd052087feec687b54b7d253b8a2a" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Parser, a wrapper around librdf_parser.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="35" type="Require Once" package="Default">
      <name/>
      <docblock line="33">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="36" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="37" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="38" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="54" package="LibRDF">
      <extends/>
      <name>LibRDF_Parser</name>
      <full_name>\LibRDF_Parser</full_name>
      <docblock line="40">
        <description>A wrapper around the librdf_parser datatype.</description>
        <long-description>&lt;p&gt;Parsers can be used to particular type of serialized RDF into a
{@link LibRDF_Model} or to simply convert the serialization into an
iteration of {@link LibRDF_Statement} objects.&lt;/p&gt;</long-description>
        <tag line="40" name="package" description="LibRDF"/>
        <tag line="40" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="40" name="copyright" description="2006 David Shea"/>
        <tag line="40" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="40" name="version" description="Release: 1.0.0"/>
        <tag line="40" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="62" namespace="global" package="Default">
        <name>$parser</name>
        <default/>
        <docblock line="56">
          <description>The underlying librdf_uri resource.</description>
          <long-description/>
          <tag line="56" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="56" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="78" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="64">
          <description>Create a new parser.</description>
          <long-description>&lt;p&gt;Name is the type of parser.  Common parsers are "rdfxml", "ntriples" and
"turtle".  If all arguments are NULL, any available parser for
application/rdf+xml will be used.&lt;/p&gt;</long-description>
          <tag line="64" name="param" description="The name of the parser to use" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="The MIME type of the values to parse" type="string" variable="$mime_type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="The URI of the RDF syntax to parse" type="string" variable="$type_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="64" name="throws" description="If unable to create a new parser" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="64" name="access" description="public"/>
        </docblock>
        <argument line="78">
          <name>$name</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="78">
          <name>$mime_type</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="79">
          <name>$type_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="99" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="93">
          <description>Free the parser's resources.</description>
          <long-description/>
          <tag line="93" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="93" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="115" package="LibRDF">
        <name>getParser</name>
        <full_name>getParser</full_name>
        <docblock line="106">
          <description>Return the underlying parser resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and shoult not
be called.&lt;/p&gt;</long-description>
          <tag line="106" name="return" description="The wrapper librdf_parser resource" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="106" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="LibRDF">
        <name>parseString</name>
        <full_name>parseString</full_name>
        <docblock line="120">
          <description>Parse a string and return an iterable object over the statements.</description>
          <long-description>&lt;p&gt;The object returned can be used in PHP foreach statements.  It is not
rewindable.&lt;/p&gt;</long-description>
          <tag line="120" name="param" description="The data to parse" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="param" description="The value to use for xml:base abbreviations" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="return" description="An iterator over the LibRDF_Statements parsed from the string" type="\LibRDF_StreamIterator">
            <type by_reference="false">\LibRDF_StreamIterator</type>
          </tag>
          <tag line="120" name="throws" description="If unable to parse the string" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="120" name="access" description="public"/>
        </docblock>
        <argument line="132">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
        <argument line="132">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="160" package="LibRDF">
        <name>parseURI</name>
        <full_name>parseURI</full_name>
        <docblock line="148">
          <description>Parse a URI and return an iterable object over the statements.</description>
          <long-description>&lt;p&gt;The object returned can be used in PHP foreach statements.  It is not
rewindable.&lt;/p&gt;</long-description>
          <tag line="148" name="param" description="The URI to parse" type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="148" name="param" description="The value to use for the base URI if different from $uri" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="148" name="return" description="An iterator over the LibRDF_Statements parsed from $uri" type="\LibRDF_StreamIterator">
            <type by_reference="false">\LibRDF_StreamIterator</type>
          </tag>
          <tag line="148" name="throws" description="If unable to parse the URI" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="148" name="access" description="public"/>
        </docblock>
        <argument line="160">
          <name>$uri</name>
          <default/>
          <type/>
        </argument>
        <argument line="160">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="public/lib/LibRDF/Storage.php" hash="cda3a3d8ac186e7edd6cbec3f808ba16" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Storage, an abstraction of an RDF graph as a set of statements.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="35" type="Require Once" package="Default">
      <name/>
      <docblock line="33">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="47" package="LibRDF">
      <extends/>
      <name>LibRDF_Storage</name>
      <full_name>\LibRDF_Storage</full_name>
      <docblock line="37">
        <description>A wrapper around the librdf_storage datatype.</description>
        <long-description/>
        <tag line="37" name="package" description="LibRDF"/>
        <tag line="37" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="37" name="copyright" description="2006 David Shea"/>
        <tag line="37" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="37" name="version" description="Release: 1.0.0"/>
        <tag line="37" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="55" namespace="global" package="Default">
        <name>$storage</name>
        <default/>
        <docblock line="49">
          <description>The underlying librdf_storage object.</description>
          <long-description/>
          <tag line="49" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="49" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="104" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="57">
          <description>Creates a new storage backend.</description>
          <long-description>&lt;p&gt;The storage methods available depends on the librdf configuration.
Methods always available are &lt;code&gt;memory',&lt;/code&gt;hashes', &lt;code&gt;file' and&lt;/code&gt;uri'.
Optional methods are &lt;code&gt;bdb',&lt;/code&gt;mysql' and &lt;code&gt;sqllite'.  The default is&lt;/code&gt;memory'.&lt;/p&gt;

&lt;p&gt;The name argument is mandatory for storage methods that required a named
handle, such as file and URI.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$stor = new LibRDF_Storage(storage_name="file", name="/tmp/filename");&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The options string passes storage_name specific options to the chosen
backend and uses the following form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$stor = new LibRDF_Storage("storage_name", "name",
             "key1='value1', key2='value2', ...");&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options values must be surrounded by single quotes for multiple
key/option pairs.&lt;/p&gt;

&lt;p&gt;The options common to all storage methods are:
   new - optional boolean (default false)
      If true, delete any existing store and create a new one, otherwise
      open an existing store.&lt;/p&gt;

&lt;p&gt;write - optional boolean (default true)
      If true, open the store in read-write mode.&lt;/p&gt;

&lt;p&gt;For hashes:
   hash-type - the name of any supported hash type (default 'memory')
      'memory' and 'file' hash types are always present, and 'bdb'
      may be available depending on compile-time configuration of
      librdf.&lt;/p&gt;

&lt;p&gt;dir - (default '.') the directory in which to create files&lt;/p&gt;

&lt;p&gt;mode - (default 0644) the octal file mode with which to create files&lt;/p&gt;</long-description>
          <tag line="57" name="param" description="The type of storage to use" type="string" variable="$storage_name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="param" description="A name for the storage handle" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="param" description="Options for the storage backend" type="string" variable="$options">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="57" name="throws" description="If unable to create a new storage" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="57" name="access" description="public"/>
        </docblock>
        <argument line="104">
          <name>$storage_name</name>
          <default>"memory"</default>
          <type/>
        </argument>
        <argument line="104">
          <name>$name</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="105">
          <name>$options</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="121" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="115">
          <description>Free the storage's resources.</description>
          <long-description/>
          <tag line="115" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="115" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="128">
          <description>Create a new storage in the same context as an existing storage.</description>
          <long-description>&lt;p&gt;When cloning a storage object, a new storage will be opened using
the same options as the existing one.  This may mean generating
new identifiers for files based on the existing identifier.&lt;/p&gt;</long-description>
          <tag line="128" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="128" name="throws" description="If unable to copy the storage" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="128" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="157" package="LibRDF">
        <name>getStorage</name>
        <full_name>getStorage</full_name>
        <docblock line="148">
          <description>Return the underlying storage resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and should not
be called.&lt;/p&gt;</long-description>
          <tag line="148" name="return" description="The storage resource" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="148" name="access" description="public"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="public/lib/LibRDF/QueryResults.php" hash="cfae297711f8d54b7a711b004546910f" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_QueryResults, the answer to a LibRDF_Query.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="35" type="Require Once" package="Default">
      <name/>
      <docblock line="33">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="36" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="37" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="38" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="true" namespace="global" line="59" package="LibRDF">
      <extends/>
      <implements>\Iterator</implements>
      <name>LibRDF_QueryResults</name>
      <full_name>\LibRDF_QueryResults</full_name>
      <docblock line="40">
        <description>A wrapper around the librdf_query_results datatype.</description>
        <long-description>&lt;p&gt;This is the generic query results wrapper.  There are three possible types
of query results--boolean (those returned by SPARQL "ASK"), bindings
(returned by "SELECT" in SPARQL and RDQL) and graph (such as those returned
by SPARQL "CONSTRUCT" and "DESCRIBE")--each with a specialized class, but
each is an iterable object.  This creates an odd case for booleans, which
are an iterator containing one element.  As a special concession for this
single-result case, {@link LibRDF_BooleanQueryResults} objects also have a
method to simply retrieve the boolean value without iteration.&lt;/p&gt;</long-description>
        <tag line="40" name="package" description="LibRDF"/>
        <tag line="40" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="40" name="copyright" description="2006 David Shea"/>
        <tag line="40" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="40" name="version" description="Release: 1.0.0"/>
        <tag line="40" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="69" namespace="global" package="Default">
        <name>$query_results</name>
        <default/>
        <docblock line="61">
          <description>The wrapped librdf_query_results datatype.</description>
          <long-description>&lt;p&gt;This resource must be set by the concrete query results classes.&lt;/p&gt;</long-description>
          <tag line="61" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="61" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="77" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="71">
          <description>Free the query result resources.</description>
          <long-description/>
          <tag line="71" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="71" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="95" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="84">
          <description>Clone the query.</description>
          <long-description>&lt;p&gt;Clonining a query is not supported, so this function disables the use
of the clone keyword by setting the underlying resource to NULL and
throwing an exception.&lt;/p&gt;</long-description>
          <tag line="84" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="84" name="throws" description="Always" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="84" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="LibRDF">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="104">
          <description>Return the query results as a string.</description>
          <long-description>&lt;p&gt;The language of the results depends on the query type.&lt;/p&gt;</long-description>
          <tag line="104" name="return" description="The query results as a string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="104" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="126" package="LibRDF">
        <name>to_string</name>
        <full_name>to_string</full_name>
        <docblock line="117">
          <description>Serialize the results to a string.</description>
          <long-description/>
          <tag line="117" name="param" description="The uri of the target syntax or NULL" type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="117" name="param" description="The base URI for the output or NULL" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="117" name="return" description="The results as a string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="117" name="throws" description="If unable to create a string from the results" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="117" name="access" description="public"/>
        </docblock>
        <argument line="126">
          <name>$uri</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="126">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="160" package="LibRDF">
        <name>makeQueryResults</name>
        <full_name>makeQueryResults</full_name>
        <docblock line="147">
          <description>Make a specialized query results object.</description>
          <long-description>&lt;p&gt;This function is intended for use by {@link LibRDF_Query}, allowing
the creating of a specific query results object from a
librdf_query_results resource.&lt;/p&gt;</long-description>
          <tag line="147" name="param" description="The librdf_query_results resource to wrap" type="resource" variable="$query_results">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="147" name="return" description="The wrapped query results" type="\LibRDF_QueryResults">
            <type by_reference="false">\LibRDF_QueryResults</type>
          </tag>
          <tag line="147" name="throws" description="If unable to wrap the object" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="147" name="access" description="public"/>
          <tag line="147" name="static" description=""/>
        </docblock>
        <argument line="160">
          <name>$query_results</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="201" package="LibRDF">
      <extends>\LibRDF_QueryResults</extends>
      <name>LibRDF_BooleanQueryResults</name>
      <full_name>\LibRDF_BooleanQueryResults</full_name>
      <docblock line="178">
        <description>A specialized librdf_query_results wrapper for boolean results.</description>
        <long-description>&lt;p&gt;Boolean results are returned when using an "ASK" query form to test
whether triples exist that satisfy certain conditions.  For example,&lt;/p&gt;

&lt;p&gt;&lt;samp&gt;PREFIX dc: &lt;a href="http://purl.org/dc/elements/1.1/"&gt;http://purl.org/dc/elements/1.1/&lt;/a&gt;&lt;br&gt;
ASK WHERE { ?book dc:creator ?author }&lt;/samp&gt;&lt;/p&gt;

&lt;p&gt;in SPARQL will return a boolean result representing whether there is any
triple with the http://purl.org/dc/elements/1.1/creator predicate.&lt;/p&gt;

&lt;p&gt;In addition to iteration (which will iterate over a single boolean element),
a function {@link getValue} is provided to simply retrieve the result the
query.&lt;/p&gt;</long-description>
        <tag line="178" name="package" description="LibRDF"/>
        <tag line="178" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="178" name="copyright" description="2006 David Shea"/>
        <tag line="178" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="178" name="version" description="Release: 1.0.0"/>
        <tag line="178" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="210" namespace="global" package="Default">
        <name>$isvalid</name>
        <default/>
        <docblock line="203">
          <description>Whether the iterator is still valid; i.e., whether next() has not been
called.</description>
          <long-description/>
          <tag line="203" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="203" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="220" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="212">
          <description>Create a new boolean query result object.</description>
          <long-description/>
          <tag line="212" name="param" description="The query results to wrap" type="resource" variable="$query_results">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="212" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="212" name="throws" description="If unable to wrap the query results" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="212" name="access" description="public"/>
        </docblock>
        <argument line="220">
          <name>$query_results</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="236" package="LibRDF">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="230">
          <description>Return the boolean value of the result.</description>
          <long-description/>
          <tag line="230" name="return" description="The value of the query" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="230" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="251" package="LibRDF">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="245">
          <description>Rewind the iterator.</description>
          <long-description/>
          <tag line="245" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="245" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="262" package="LibRDF">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="256">
          <description>Return the current (and only) boolean value.</description>
          <long-description/>
          <tag line="256" name="return" description="The current value" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="256" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="278" package="LibRDF">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="272">
          <description>Return the iterator key (always 0).</description>
          <long-description/>
          <tag line="272" name="return" description="The current key" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="272" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="292" package="LibRDF">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="283">
          <description>Advance the iterator.</description>
          <long-description>&lt;p&gt;Since boolean results have only one result, this function renders the
iterator invalid.&lt;/p&gt;</long-description>
          <tag line="283" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="283" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="303" package="LibRDF">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="297">
          <description>Test whether the iterator is still valid.</description>
          <long-description/>
          <tag line="297" name="return" description="Whether the iterator is valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="297" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="327" package="LibRDF">
      <extends>\LibRDF_QueryResults</extends>
      <name>LibRDF_GraphQueryResults</name>
      <full_name>\LibRDF_GraphQueryResults</full_name>
      <docblock line="309">
        <description>A specialized librdf_query_results wrapper for graph results.</description>
        <long-description>&lt;p&gt;Graph results are returned by queries that construct a graph based on
triples that meet certain conditions such as those using the "CONSTRUCT"
or "DESCRIBE" SPARQL keywords.&lt;/p&gt;

&lt;p&gt;Iterating over this class will result in a stream of
{@link LibRDF_Statement} objects, similar to the result of iterating over
a {@link LibRDF_Model}.&lt;/p&gt;</long-description>
        <tag line="309" name="package" description="LibRDF"/>
        <tag line="309" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="309" name="copyright" description="2006 David Shea"/>
        <tag line="309" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="309" name="version" description="Release: 1.0.0"/>
        <tag line="309" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="335" namespace="global" package="Default">
        <name>$iterator</name>
        <default/>
        <docblock line="329">
          <description>The LibRDF_StreamIterator used for iterating over the statements.</description>
          <long-description/>
          <tag line="329" name="var" description="" type="\LibRDF_StreamIterator">
            <type by_reference="false">\LibRDF_StreamIterator</type>
          </tag>
          <tag line="329" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="345" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="337">
          <description>Create a new graph query result object.</description>
          <long-description/>
          <tag line="337" name="param" description="The query results to wrap" type="resource" variable="$query_results">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="337" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="337" name="throws" description="If unable to wrap the query results" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="337" name="access" description="public"/>
        </docblock>
        <argument line="345">
          <name>$query_results</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="361" package="LibRDF">
        <name>resetIterator</name>
        <full_name>resetIterator</full_name>
        <docblock line="355">
          <description>Reset the $iterator variable with a new librdf_stream.</description>
          <long-description/>
          <tag line="355" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="355" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="374" package="LibRDF">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="368">
          <description>Rewind the iterator.</description>
          <long-description/>
          <tag line="368" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="368" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="385" package="LibRDF">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="379">
          <description>Fetch the current statement on the iterator.</description>
          <long-description/>
          <tag line="379" name="return" description="The current statement" type="\LibRDF_Statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="379" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="397" package="LibRDF">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="391">
          <description>Fetch the iterator's current key.</description>
          <long-description/>
          <tag line="391" name="return" description="The current key" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="391" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="409" package="LibRDF">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="403">
          <description>Advance the iterator to the next statement.</description>
          <long-description/>
          <tag line="403" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="403" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="421" package="LibRDF">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="415">
          <description>Return whether the iterator is still valid.</description>
          <long-description/>
          <tag line="415" name="return" description="Whether the iterator is valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="415" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="449" package="LibRDF">
      <extends>\LibRDF_QueryResults</extends>
      <name>LibRDF_BindingsQueryResults</name>
      <full_name>\LibRDF_BindingsQueryResults</full_name>
      <docblock line="428">
        <description>A specialized librdf_query_results wrapper for bindings results.</description>
        <long-description>&lt;p&gt;Bindings are returned by SELECT statements and associate result nodes with
names for each tuple in the result set.  For example, the query&lt;/p&gt;

&lt;p&gt;&lt;samp&gt;SELECT ?book, ?author WHERE (?book, dc:creator, ?author)&lt;br&gt;
USING dc for &lt;a href="http://purl.org/dc/elements/1.1/"&gt;http://purl.org/dc/elements/1.1/&lt;/a&gt;"&lt;/samp&gt;&lt;/p&gt;

&lt;p&gt;in RDQL would result in a set of tuples, each containing a value for
"author" and "book".  This results of iterating over this object are
associative arrays of the result names and values.  The iterator cannot
be rewound.&lt;/p&gt;</long-description>
        <tag line="428" name="package" description="LibRDF"/>
        <tag line="428" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="428" name="copyright" description="2006 David Shea"/>
        <tag line="428" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="428" name="version" description="Release: 1.0.0"/>
        <tag line="428" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="457" namespace="global" package="Default">
        <name>$isvalid</name>
        <default/>
        <docblock line="451">
          <description>Whether the iterator is still valid.</description>
          <long-description/>
          <tag line="451" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="451" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="466" namespace="global" package="Default">
        <name>$rewindable</name>
        <default/>
        <docblock line="459">
          <description>Whether the iterator is rewindable; i.e., whether the iterator has been
advanced.</description>
          <long-description/>
          <tag line="459" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="459" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="476" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="468">
          <description>Create a new bindings query result object.</description>
          <long-description/>
          <tag line="468" name="param" description="The query results to wrap" type="resource" variable="$query_results">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="468" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="468" name="throws" description="If unable to wrap the query results" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="468" name="access" description="public"/>
        </docblock>
        <argument line="476">
          <name>$query_results</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="497" package="LibRDF">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="488">
          <description>Rewind the iterator.</description>
          <long-description>&lt;p&gt;Rewinding is not supported, so this function will invalidate the
iterator unless it is still in the initial (rewound) position.&lt;/p&gt;</long-description>
          <tag line="488" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="488" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="514" package="LibRDF">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="504">
          <description>Return the current tuple of bindings.</description>
          <long-description>&lt;p&gt;The result is an associative array using the binding names as the
indices.&lt;/p&gt;</long-description>
          <tag line="504" name="return" description="The current bindings tuple" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="504" name="throws" description="If unable to get the current bindings tuple" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="504" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="545" package="LibRDF">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="539">
          <description>Return the current key.</description>
          <long-description/>
          <tag line="539" name="return" description="The current key" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="539" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="556" package="LibRDF">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="550">
          <description>Advance the iterator.</description>
          <long-description/>
          <tag line="550" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="550" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="575" package="LibRDF">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="569">
          <description>Return whether the iterator is still valid.</description>
          <long-description/>
          <tag line="569" name="return" description="Whether the iterator is valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="569" name="access" description="public"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="public/lib/LibRDF/Model.php" hash="f56053558579b77bacd3d8bd655c5e11" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Model, a representation of an RDF graph.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="author" description="Felix Ostrowski &lt;felix.ostrowski@googlemail.com&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="copyright" description="2011, 2012 Felix Ostrowski"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="37" type="Require Once" package="Default">
      <name/>
      <docblock line="35">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="38" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="39" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="40" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="41" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="42" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="43" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="44" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="45" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="46" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="47" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="62" package="LibRDF">
      <extends>\Exception</extends>
      <name>LibRDF_LookupError</name>
      <full_name>\LibRDF_LookupError</full_name>
      <docblock line="49">
        <description>The exception type used for statement lookup failures.</description>
        <long-description>&lt;p&gt;An object of this type is thrown by {@link LibRDF_Model} when getSource,
getArc or getTarget is called with nodes that do not match any statement.&lt;/p&gt;</long-description>
        <tag line="49" name="package" description="LibRDF"/>
        <tag line="49" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="49" name="copyright" description="2006 David Shea"/>
        <tag line="49" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="49" name="version" description="Release: 1.0.0"/>
        <tag line="49" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="64">
          <description>Create a new LibRDF_LookupError.</description>
          <long-description/>
          <tag line="64" name="param" description="The error message to use" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="64" name="access" description="public"/>
        </docblock>
        <argument line="71">
          <name>$message</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="107" package="LibRDF">
      <extends/>
      <implements>\Iterator</implements>
      <name>LibRDF_Model</name>
      <full_name>\LibRDF_Model</full_name>
      <docblock line="77">
        <description>A wrapper around the librdf_model datatype.</description>
        <long-description>&lt;p&gt;A LibRDF_Model is a collection of {@link LibRDF_Statement} objects using
a {@link LibRDF_Storage} object to save the statements.  Statements are
added using {@link addStatement} or through the use of a
{@link LibRDF_Parser} and {@link loadStatementsFromString} or
{@link loadStatementsFromURI}, and statements are removed using
{@link removeStatement}.  Statements can be queried through the use of
either {@link findStatements} or a {@link LibRDF_Query} object.  The
statements can be written to a stream using {@link LibRDF_Serializer} and
{@link serializeStatements} or {@link serializeStatementsToFile}.&lt;/p&gt;

&lt;p&gt;This object is iterable.  When used as part of a foreach statement, it
will iterate over every statement contained in the model.  For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach ($model as $statement) {
   echo $statement;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will echo each statement individually.  Unlike {@link LibRDF_StreamIterator},
the Model can be rewound and used for multiple iterations.&lt;/p&gt;</long-description>
        <tag line="77" name="package" description="LibRDF"/>
        <tag line="77" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="77" name="copyright" description="2006 David Shea"/>
        <tag line="77" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="77" name="version" description="Release: 1.0.0"/>
        <tag line="77" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="115" namespace="global" package="Default">
        <name>$model</name>
        <default/>
        <docblock line="109">
          <description>The underlying librdf_model.</description>
          <long-description/>
          <tag line="109" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="109" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="128" namespace="global" package="Default">
        <name>$iterator</name>
        <default/>
        <docblock line="117">
          <description>The stream iterator over the model's statements.</description>
          <long-description>&lt;p&gt;This variable begins as NULL and is set by the iteration functions
using {@link resetIterator}.  {@link rewind} resets this variable to
null, causing subsequent calls of the other iteration function to
begin anew with a fresh iterator.&lt;/p&gt;</long-description>
          <tag line="117" name="var" description="" type="\LibRDF_StreamIterator">
            <type by_reference="false">\LibRDF_StreamIterator</type>
          </tag>
          <tag line="117" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="142" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="130">
          <description>Create a new librdf_model.</description>
          <long-description>&lt;p&gt;See the {@link http://librdf.org/ librdf} documentation for information
on the possible options.&lt;/p&gt;</long-description>
          <tag line="130" name="param" description="The storage on which this model should be built" type="\LibRDF_Storage" variable="$storage">
            <type by_reference="false">\LibRDF_Storage</type>
          </tag>
          <tag line="130" name="param" description="Options to pass to librdf_new_model" type="string" variable="$options">
            <type by_reference="false">string</type>
          </tag>
          <tag line="130" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="130" name="throws" description="If unable to create a new model" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="130" name="access" description="public"/>
        </docblock>
        <argument line="142">
          <name>$storage</name>
          <default/>
          <type>\LibRDF_Storage</type>
        </argument>
        <argument line="142">
          <name>$options</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="160" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="154">
          <description>Free a model's resources.</description>
          <long-description/>
          <tag line="154" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="154" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="176" package="LibRDF">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="167">
          <description>Return a string representation of the model.</description>
          <long-description>&lt;p&gt;This function can be used as a lazy form of serializtion.  Use
a {@link LibRDF_Serializer} if you care about the format of the output.&lt;/p&gt;</long-description>
          <tag line="167" name="return" description="The model as a string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="167" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="192" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="181">
          <description>Create a copy of the model.</description>
          <long-description>&lt;p&gt;Whether a model can be copied depends upon the underlying model factory.
In-memory storages cannot be cloned, so a clone of models using this
form of storage will fail.&lt;/p&gt;</long-description>
          <tag line="181" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="181" name="throws" description="If unable to copy the model" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="181" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="210" package="LibRDF">
        <name>getModel</name>
        <full_name>getModel</full_name>
        <docblock line="201">
          <description>Return the model resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and should not
be called.&lt;/p&gt;</long-description>
          <tag line="201" name="return" description="The wrapped model resource" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="201" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="228" package="LibRDF">
        <name>addStatement</name>
        <full_name>addStatement</full_name>
        <docblock line="215">
          <description>Add a statement to the model.</description>
          <long-description>&lt;p&gt;A statement can be added more than once by adding it under different
contexts, otherwise adding a duplicate statement will have no effect.
Not all models support contexts.&lt;/p&gt;</long-description>
          <tag line="215" name="param" description="The statement to add" type="\LibRDF_Statement" variable="$statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="215" name="param" description="An optional context under which to add the statement" type="\LibRDF_URINode" variable="$context">
            <type by_reference="false">\LibRDF_URINode</type>
          </tag>
          <tag line="215" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="215" name="throws" description="If unable to add the statement" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="215" name="access" description="public"/>
        </docblock>
        <argument line="228">
          <name>$statement</name>
          <default/>
          <type>\LibRDF_Statement</type>
        </argument>
        <argument line="229">
          <name>$context</name>
          <default>NULL</default>
          <type>\LibRDF_URINode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="259" package="LibRDF">
        <name>removeStatement</name>
        <full_name>removeStatement</full_name>
        <docblock line="250">
          <description>Remove a statement from the model.</description>
          <long-description/>
          <tag line="250" name="param" description="The statement to remove" type="\LibRDF_Statement" variable="$statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="250" name="param" description="The context from which to remove the statement" type="\LibRDF_URINode" variable="$context">
            <type by_reference="false">\LibRDF_URINode</type>
          </tag>
          <tag line="250" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="250" name="throws" description="If unable to remove the statement" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="250" name="access" description="public"/>
        </docblock>
        <argument line="259">
          <name>$statement</name>
          <default/>
          <type>\LibRDF_Statement</type>
        </argument>
        <argument line="260">
          <name>$context</name>
          <default>NULL</default>
          <type>\LibRDF_URINode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="282" package="LibRDF">
        <name>size</name>
        <full_name>size</full_name>
        <docblock line="276">
          <description>Return the number of statements in the model.</description>
          <long-description/>
          <tag line="276" name="return" description="The number of statements" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="276" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="300" package="LibRDF">
        <name>getSource</name>
        <full_name>getSource</full_name>
        <docblock line="287">
          <description>Return a single source node that is part of a statement containing
the given predicate and target.</description>
          <long-description>&lt;p&gt;This function is equivalent to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$model-&gt;findStatements(NULL, $predicate, $target)-&gt;current()-&gt;getSubject()&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="287" name="param" description="The predicate node for which to search" type="\LibRDF_Node" variable="$arc">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="287" name="param" description="The target node for which to search" type="\LibRDF_Node" variable="$target">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="287" name="return" description="A node that matches the criteria" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="287" name="throws" description="If no statement with the given predicate and target is found" type="\LibRDF_LookupError">
            <type by_reference="false">\LibRDF_LookupError</type>
          </tag>
          <tag line="287" name="access" description="public"/>
        </docblock>
        <argument line="300">
          <name>$arc</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
        <argument line="300">
          <name>$target</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="321" package="LibRDF">
        <name>getSources</name>
        <full_name>getSources</full_name>
        <docblock line="311">
          <description>Return source nodes that are part of a statement containing the
given predicate and object.</description>
          <long-description/>
          <tag line="311" name="param" description="The arc node for which to search" type="\LibRDF_Node" variable="$arc">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="311" name="param" description="The target node for which to search" type="\LibRDF_Node" variable="$target">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="311" name="return" description="An iterator for nodes that matches the criteria" type="\LibRDF_Iterator">
            <type by_reference="false">\LibRDF_Iterator</type>
          </tag>
          <tag line="311" name="throws" description="If no statement with the given source and predicate is found" type="\LibRDF_LookupError">
            <type by_reference="false">\LibRDF_LookupError</type>
          </tag>
          <tag line="311" name="access" description="public"/>
        </docblock>
        <argument line="321">
          <name>$arc</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
        <argument line="321">
          <name>$target</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="345" package="LibRDF">
        <name>getArc</name>
        <full_name>getArc</full_name>
        <docblock line="332">
          <description>Return a single predicate node that is part of a statement containing
the given source and target.</description>
          <long-description>&lt;p&gt;This function is equivalent to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$model-&gt;findStatements($source, NULL, $target)-&gt;current()-&gt;getPredicate()&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="332" name="param" description="The source node for which to search" type="\LibRDF_Node" variable="$source">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="332" name="param" description="The target node for which to search" type="\LibRDF_Node" variable="$target">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="332" name="return" description="A node that matches the criteria" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="332" name="throws" description="If no statement with the given source and target is found" type="\LibRDF_LookupError">
            <type by_reference="false">\LibRDF_LookupError</type>
          </tag>
          <tag line="332" name="access" description="public"/>
        </docblock>
        <argument line="345">
          <name>$source</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
        <argument line="345">
          <name>$target</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="366" package="LibRDF">
        <name>getArcs</name>
        <full_name>getArcs</full_name>
        <docblock line="356">
          <description>Return arc nodes that are part of a statement containing the
given source and predicate.</description>
          <long-description/>
          <tag line="356" name="param" description="The source node for which to search" type="\LibRDF_Node" variable="$source">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="356" name="param" description="The target node for which to search" type="\LibRDF_Node" variable="$target">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="356" name="return" description="An iterator for nodes that matches the criteria" type="\LibRDF_Iterator">
            <type by_reference="false">\LibRDF_Iterator</type>
          </tag>
          <tag line="356" name="throws" description="If no statement with the given source and predicate is found" type="\LibRDF_LookupError">
            <type by_reference="false">\LibRDF_LookupError</type>
          </tag>
          <tag line="356" name="access" description="public"/>
        </docblock>
        <argument line="366">
          <name>$source</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
        <argument line="366">
          <name>$target</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="390" package="LibRDF">
        <name>getTarget</name>
        <full_name>getTarget</full_name>
        <docblock line="377">
          <description>Return a single target node that is part of a statement containing the
given source and predicate.</description>
          <long-description>&lt;p&gt;This function is equivalent to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$model-&gt;findStatements($source, $predicate, NULL)-&gt;current()-&gt;getTarget()&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="377" name="param" description="The source node for which to search" type="\LibRDF_Node" variable="$source">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="377" name="param" description="The predicate node for which to search" type="\LibRDF_Node" variable="$arc">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="377" name="return" description="A node that matches the criteria" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="377" name="throws" description="If no statement with the given source and predicate is found" type="\LibRDF_LookupError">
            <type by_reference="false">\LibRDF_LookupError</type>
          </tag>
          <tag line="377" name="access" description="public"/>
        </docblock>
        <argument line="390">
          <name>$source</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
        <argument line="390">
          <name>$arc</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="411" package="LibRDF">
        <name>getTargets</name>
        <full_name>getTargets</full_name>
        <docblock line="401">
          <description>Return target nodes that are part of a statement containing the
given source and predicate.</description>
          <long-description/>
          <tag line="401" name="param" description="The source node for which to search" type="\LibRDF_Node" variable="$source">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="401" name="param" description="The predicate node for which to search" type="\LibRDF_Node" variable="$arc">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="401" name="return" description="An iterator for nodes that matches the criteria" type="\LibRDF_Iterator">
            <type by_reference="false">\LibRDF_Iterator</type>
          </tag>
          <tag line="401" name="throws" description="If no statement with the given source and predicate is found" type="\LibRDF_LookupError">
            <type by_reference="false">\LibRDF_LookupError</type>
          </tag>
          <tag line="401" name="access" description="public"/>
        </docblock>
        <argument line="411">
          <name>$source</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
        <argument line="411">
          <name>$arc</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="429" package="LibRDF">
        <name>hasStatement</name>
        <full_name>hasStatement</full_name>
        <docblock line="422">
          <description>Test whether the model contains a statement.</description>
          <long-description/>
          <tag line="422" name="param" description="The statement for which to search" type="\LibRDF_Statement" variable="$statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="422" name="return" description="Whether such a statement exists in the graph" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="422" name="access" description="public"/>
        </docblock>
        <argument line="429">
          <name>$statement</name>
          <default/>
          <type>\LibRDF_Statement</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="461" package="LibRDF">
        <name>findStatements</name>
        <full_name>findStatements</full_name>
        <docblock line="439">
          <description>Find a statement in the model.</description>
          <long-description>&lt;p&gt;A NULL argument for any of source, predicate or target is treated as
a wildcard.  If a context is given, only statements from that context
will be returned.  The result is an object that be used in foreach
iteration.  The returned iterator cannot be rewound.&lt;/p&gt;

&lt;p&gt;The search arguments can be either a (source, predicate target) triple
of LibRDF_Node objects or a LibRDF_Statement object.  Valid argument
lists are (source, predicate, target, [context]) or
(statement, [context]).&lt;/p&gt;

&lt;p&gt;For more complex queries, see {@link LibRDF_Query}.&lt;/p&gt;</long-description>
          <tag line="439" name="param" description="The statement to match or a source node" type="mixed" variable="$statement">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="439" name="param" description="The predicate to match" type="\LibRDF_Node" variable="$predicate">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="439" name="param" description="The target to match" type="\LibRDF_Node" variable="$target">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="439" name="param" description="The context in which to search" type="\LibRDF_URINode" variable="$context">
            <type by_reference="false">\LibRDF_URINode</type>
          </tag>
          <tag line="439" name="return" description="An iterator over the matched statements" type="\LibRDF_StreamIterator">
            <type by_reference="false">\LibRDF_StreamIterator</type>
          </tag>
          <tag line="439" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="549" package="LibRDF">
        <name>resetIterator</name>
        <full_name>resetIterator</full_name>
        <docblock line="543">
          <description>Discard the current statement iterator and create a new one.</description>
          <long-description/>
          <tag line="543" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="543" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="564" package="LibRDF">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="558">
          <description>Reset the statement iterator.</description>
          <long-description/>
          <tag line="558" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="558" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="575" package="LibRDF">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="569">
          <description>Return the current statement on the iterator.</description>
          <long-description/>
          <tag line="569" name="return" description="The current statement" type="\LibRDF_Statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="569" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="587" package="LibRDF">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="581">
          <description>Return the current iteration key.</description>
          <long-description/>
          <tag line="581" name="return" description="The current key" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="581" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="599" package="LibRDF">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="593">
          <description>Advance the iterator's position.</description>
          <long-description/>
          <tag line="593" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="593" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="611" package="LibRDF">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="605">
          <description>Check whether the statement iterator is still valid.</description>
          <long-description/>
          <tag line="605" name="return" description="Whether the iterator is still valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="605" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="630" package="LibRDF">
        <name>loadStatementsFromString</name>
        <full_name>loadStatementsFromString</full_name>
        <docblock line="617">
          <description>Load statements using a {@link LibRDF_Parser}.</description>
          <long-description>&lt;p&gt;If no $base_uri is given, the RDF namespace URI will be used as the
base for relative URIs.&lt;/p&gt;</long-description>
          <tag line="617" name="param" description="The parser with which to parse the string" type="\LibRDF_Parser" variable="$parser">
            <type by_reference="false">\LibRDF_Parser</type>
          </tag>
          <tag line="617" name="param" description="The string to parse" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="617" name="param" description="The base URI to use for relative URIs in the string" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="617" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="617" name="throws" description="If unable to parse the string" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="617" name="access" description="public"/>
        </docblock>
        <argument line="630">
          <name>$parser</name>
          <default/>
          <type>\LibRDF_Parser</type>
        </argument>
        <argument line="631">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
        <argument line="631">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="657" package="LibRDF">
        <name>loadStatementsFromURI</name>
        <full_name>loadStatementsFromURI</full_name>
        <docblock line="647">
          <description>Load statements from a URI using a {@link LibRDF_Parser}.</description>
          <long-description/>
          <tag line="647" name="param" description="The parser with which to parse the URI's contents" type="\LibRDF_Parser" variable="$parser">
            <type by_reference="false">\LibRDF_Parser</type>
          </tag>
          <tag line="647" name="param" description="The URI with the contents to load" type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="647" name="param" description="The base URI to use for relative URIs if different from $uri" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="647" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="647" name="throws" description="If unable to parse the URI contents" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="647" name="access" description="public"/>
        </docblock>
        <argument line="657">
          <name>$parser</name>
          <default/>
          <type>\LibRDF_Parser</type>
        </argument>
        <argument line="658">
          <name>$uri</name>
          <default/>
          <type/>
        </argument>
        <argument line="658">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="687" package="LibRDF">
        <name>loadStatements</name>
        <full_name>loadStatements</full_name>
        <docblock line="678">
          <description>Load statements from a URI or string, detecting the necessary parser.</description>
          <long-description/>
          <tag line="678" name="param" description="The URI or string with the contents to load" type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
          <tag line="678" name="param" description="The base URI to use for relative URIs" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="678" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="678" name="throws" description="If unable to parse the contents" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="678" name="access" description="public"/>
        </docblock>
        <argument line="687">
          <name>$content</name>
          <default/>
          <type/>
        </argument>
        <argument line="687">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="727" package="LibRDF">
        <name>serializeStatements</name>
        <full_name>serializeStatements</full_name>
        <docblock line="718">
          <description>Serialize the model as a string.</description>
          <long-description/>
          <tag line="718" name="param" description="The serializer to use" type="\LibRDF_Serializer" variable="$serializer">
            <type by_reference="false">\LibRDF_Serializer</type>
          </tag>
          <tag line="718" name="param" description="The base URI to use if relative URIs are desired" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="718" name="return" description="The model as a string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="718" name="throws" description="If unable to serialize the model" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="718" name="access" description="public"/>
        </docblock>
        <argument line="727">
          <name>$serializer</name>
          <default/>
          <type>\LibRDF_Serializer</type>
        </argument>
        <argument line="728">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="754" package="LibRDF">
        <name>serializeStatementsToFile</name>
        <full_name>serializeStatementsToFile</full_name>
        <docblock line="744">
          <description>Serialize the model and write the contents to a file.</description>
          <long-description/>
          <tag line="744" name="param" description="The serializer to use" type="\LibRDF_Serializer" variable="$serializer">
            <type by_reference="false">\LibRDF_Serializer</type>
          </tag>
          <tag line="744" name="param" description="The name of the file to which to write" type="string" variable="$file_name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="744" name="param" description="The base URI to use" type="string" variable="$base_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="744" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="744" name="throws" description="If unable to serialize the model" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="744" name="access" description="public"/>
        </docblock>
        <argument line="754">
          <name>$serializer</name>
          <default/>
          <type>\LibRDF_Serializer</type>
        </argument>
        <argument line="755">
          <name>$file_name</name>
          <default/>
          <type/>
        </argument>
        <argument line="755">
          <name>$base_uri</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="775" package="LibRDF">
        <name>getListAsArray</name>
        <full_name>getListAsArray</full_name>
        <docblock line="769">
          <description>Turns an RDF list into an ordered PHP array.</description>
          <long-description/>
          <tag line="769" name="param" description="The head of the list." type="\LibRDF_Node" variable="$head">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="769" name="return" description="The list as an array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="775">
          <name>$head</name>
          <default/>
          <type>\LibRDF_Node</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <notice line="439" code="50013">Parameter $statement could not be found in findStatements()</notice>
      <notice line="439" code="50013">Parameter $predicate could not be found in findStatements()</notice>
      <notice line="439" code="50013">Parameter $target could not be found in findStatements()</notice>
      <notice line="439" code="50013">Parameter $context could not be found in findStatements()</notice>
    </parse_markers>
  </file>
  <file path="public/lib/LibRDF/StreamIterator.php" hash="681c5a40b4414b53420c4d9acf7c8f38" package="LibRDF">
    <docblock line="2">
      <description>Wrap a librdf_stream as a PHP iterator using SPL.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="LibRDF"/>
      <tag line="2" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="2" name="copyright" description="2006 David Shea"/>
      <tag line="2" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="2" name="version" description="Release: 1.0.0"/>
      <tag line="2" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="34" type="Require Once" package="Default">
      <name/>
      <docblock line="32">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="55" package="LibRDF">
      <extends/>
      <implements>\Iterator</implements>
      <name>LibRDF_StreamIterator</name>
      <full_name>\LibRDF_StreamIterator</full_name>
      <docblock line="36">
        <description>Wrap a librdf_stream resource as an iterable object.</description>
        <long-description>&lt;p&gt;This class should not be created directly, nor are its methods of interest
to the casual user.  Its only intent is to provide a return type for
LibRDF_Model::find_statements, as well as the underlying iterator for both
LibRDF_Model and LibRDF_GraphQueryResults, that can then be used in a PHP
foreach statement without any direct function calls.&lt;/p&gt;

&lt;p&gt;Objects of this type may only be used for iteration once.  Once iteration
has begun, a call to rewind will render the object invalid.&lt;/p&gt;</long-description>
        <tag line="36" name="package" description="LibRDF"/>
        <tag line="36" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="36" name="copyright" description="2006 David Shea"/>
        <tag line="36" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="36" name="version" description="Release: 1.0.0"/>
        <tag line="36" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="63" namespace="global" package="Default">
        <name>$isvalid</name>
        <default/>
        <docblock line="57">
          <description>A cache of whether the iterator is still valid.</description>
          <long-description/>
          <tag line="57" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="57" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="71" namespace="global" package="Default">
        <name>$stream</name>
        <default/>
        <docblock line="65">
          <description>The underlying librdf_stream resource.</description>
          <long-description/>
          <tag line="65" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="65" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="83" namespace="global" package="Default">
        <name>$key</name>
        <default/>
        <docblock line="73">
          <description>An integer used to provide keys over the iteration.</description>
          <long-description>&lt;p&gt;There are no keys created by the librdf_stream data, so iteration
keys are created as an integer with an initial value of 0 increasing
by one for each call of {@link next}.&lt;/p&gt;</long-description>
          <tag line="73" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="73" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="92" namespace="global" package="Default">
        <name>$source</name>
        <default/>
        <docblock line="85">
          <description>A reference to the stream's source object to prevent it from being
garbage collected before the stream.</description>
          <long-description/>
          <tag line="85" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="85" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="103" namespace="global" package="Default">
        <name>$rewindable</name>
        <default/>
        <docblock line="94">
          <description>A flag for whether the stream is rewindable.</description>
          <long-description>&lt;p&gt;A stream may be rewound before {@link next} is called, after which
rewinding invalidates the stream.&lt;/p&gt;</long-description>
          <tag line="94" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="94" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="117" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="105">
          <description>Create a new iterable object from a librdf_stream resource.</description>
          <long-description>&lt;p&gt;User functions should not create librdf_stream resources directly,
so this constructor is intended only to provide an interface into the
streams returned by librdf functions and called by LibRDF classes.&lt;/p&gt;</long-description>
          <tag line="105" name="param" description="The librdf_stream object to wrap" type="resource" variable="$stream">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="105" name="param" description="The object that created the stream" type="mixed" variable="$source">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="105" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="105" name="access" description="public"/>
        </docblock>
        <argument line="117">
          <name>$stream</name>
          <default/>
          <type/>
        </argument>
        <argument line="117">
          <name>$source</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="126">
          <description>Free the stream's resources.</description>
          <long-description/>
          <tag line="126" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="126" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="148" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="139">
          <description>Clone a LibRDF_StreamIterator object.</description>
          <long-description>&lt;p&gt;Cloning a stream is unsupported, so using the clone operator on a
LibRDF_StreamIterator object will produce an empty iterator.&lt;/p&gt;</long-description>
          <tag line="139" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="139" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="163" package="LibRDF">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="154">
          <description>Rewind the stream.</description>
          <long-description>&lt;p&gt;Rewinding is not supported, so this call invalidates the stream unless
the stream is still at the starting position.&lt;/p&gt;</long-description>
          <tag line="154" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="154" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="176" package="LibRDF">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="170">
          <description>Return the current statement or NULL if the stream is no longer valid.</description>
          <long-description/>
          <tag line="170" name="return" description="The current statement on the iterator" type="\LibRDF_Statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="170" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="198" package="LibRDF">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="192">
          <description>Return the key of the current element on the stream.</description>
          <long-description/>
          <tag line="192" name="return" description="The current key" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="192" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="209" package="LibRDF">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="203">
          <description>Advance the stream's position.</description>
          <long-description/>
          <tag line="203" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="203" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="228" package="LibRDF">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="222">
          <description>Return whether the stream is still valid.</description>
          <long-description/>
          <tag line="222" name="return" description="Whether the stream is still valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="222" name="access" description="public"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="public/lib/LibRDF/URI.php" hash="2e0e76edc214edef48ff4c37d5c75463" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_URI, a representation of a resource in a world.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="35" type="Require Once" package="Default">
      <name/>
      <docblock line="33">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="54" package="LibRDF">
      <extends/>
      <name>LibRDF_URI</name>
      <full_name>\LibRDF_URI</full_name>
      <docblock line="37">
        <description>A wrapper around the librdf_uri datatype.</description>
        <long-description>&lt;p&gt;There is no need to use this class directly, as all LibRDF classes infer
whether or not a librdf_uri is needed from context; all the functions that
use librdf_uri internally take strings as arguments for the sake of
making things easier for the user.  This class exists mainly to make
error handling and garbage collection of librdf_uri resources more
convenient internally for the LibRDF classes.&lt;/p&gt;</long-description>
        <tag line="37" name="package" description="LibRDF"/>
        <tag line="37" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="37" name="copyright" description="2006 David Shea"/>
        <tag line="37" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="37" name="version" description="Release: 1.0.0"/>
        <tag line="37" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="62" namespace="global" package="Default">
        <name>$uri</name>
        <default/>
        <docblock line="56">
          <description>The underlying librdf_uri resource.</description>
          <long-description/>
          <tag line="56" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="56" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="72" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="64">
          <description>Create a new URI object from a string.</description>
          <long-description/>
          <tag line="64" name="param" description="The string to use for the URI" type="string" variable="$uri_string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="64" name="throws" description="If unable to create a new URI" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="64" name="access" description="public"/>
        </docblock>
        <argument line="72">
          <name>$uri_string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="87" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="81">
          <description>Free the URI's resources.</description>
          <long-description/>
          <tag line="81" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="81" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="100" package="LibRDF">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="94">
          <description>Return the string representation of the URI.</description>
          <long-description/>
          <tag line="94" name="return" description="The URI string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="94" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="105">
          <description>Create a new URI object from an existing URI.</description>
          <long-description/>
          <tag line="105" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="105" name="throws" description="If unable to copy the URI" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="105" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="130" package="LibRDF">
        <name>getURI</name>
        <full_name>getURI</full_name>
        <docblock line="121">
          <description>Return the underlying URI resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and should not
be called.&lt;/p&gt;</long-description>
          <tag line="121" name="return" description="The URI resource" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="121" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="142" package="LibRDF">
        <name>isEqual</name>
        <full_name>isEqual</full_name>
        <docblock line="135">
          <description>Compare this URI against another URI for equality.</description>
          <long-description/>
          <tag line="135" name="param" description="The URI against which to compare" type="\LibRDF_URI" variable="$uri">
            <type by_reference="false">\LibRDF_URI</type>
          </tag>
          <tag line="135" name="return" description="Whether the two URIs are equal" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="135" name="access" description="public"/>
        </docblock>
        <argument line="142">
          <name>$uri</name>
          <default/>
          <type>\LibRDF_URI</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="public/lib/LibRDF/Statement.php" hash="98d2b584bffa4b38e207318d59564d8f" package="LibRDF">
    <docblock line="3">
      <description>LibRDF_Statement, a representation of a single triple.</description>
      <long-description>&lt;p&gt;Statements are a pair of nodes and an arc.  Both nodes and the arc are
represented as {@link LibRDF_Node} objects.  Statements are collected into
a graph using {@link LibRDF_Model}.&lt;/p&gt;

&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="LibRDF"/>
      <tag line="3" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="3" name="copyright" description="2006 David Shea"/>
      <tag line="3" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="3" name="version" description="Release: 1.0.0"/>
      <tag line="3" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="39" type="Require Once" package="Default">
      <name/>
      <docblock line="37">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <include line="40" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="52" package="LibRDF">
      <extends/>
      <name>LibRDF_Statement</name>
      <full_name>\LibRDF_Statement</full_name>
      <docblock line="42">
        <description>A wrapper around the librdf_statement datatype.</description>
        <long-description/>
        <tag line="42" name="package" description="LibRDF"/>
        <tag line="42" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="42" name="copyright" description="2006 David Shea"/>
        <tag line="42" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="42" name="version" description="Release: 1.0.0"/>
        <tag line="42" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="60" namespace="global" package="Default">
        <name>$statement</name>
        <default/>
        <docblock line="54">
          <description>The wrapped librdf_statement resource.</description>
          <long-description/>
          <tag line="54" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="54" name="access" description="public"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="75" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="62">
          <description>Create a new Statement.</description>
          <long-description>&lt;p&gt;The subject must be either a URINode or a BlankNode.  The predicate
must be a URINode.&lt;/p&gt;</long-description>
          <tag line="62" name="param" description="The librdf_statement to copy or the source Node of a statement" type="mixed" variable="$statement">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="62" name="param" description="The statement's predicate" type="\LibRDF_Node" variable="$predicate">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="62" name="param" description="The statement's object" type="\LibRDF_Node" variable="$object">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="62" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="62" name="throws" description="If unable to create a new statement" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="62" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="108">
          <description>Free a Statement's resources.</description>
          <long-description/>
          <tag line="108" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="108" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="127" package="LibRDF">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="121">
          <description>Return a string representation of a statement</description>
          <long-description/>
          <tag line="121" name="return" description="The statement as a string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="121" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="146" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="139">
          <description>Clone a Statement</description>
          <long-description/>
          <tag line="139" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="139" name="throws" description="If unable to create a new statement" type="\LibRDF_Error">
            <type by_reference="false">\LibRDF_Error</type>
          </tag>
          <tag line="139" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="164" package="LibRDF">
        <name>getStatement</name>
        <full_name>getStatement</full_name>
        <docblock line="155">
          <description>Get the underlying librdf_statement resource.</description>
          <long-description>&lt;p&gt;This function is intended for other LibRDF classes and should not
be called.&lt;/p&gt;</long-description>
          <tag line="155" name="return" description="The wrapped librdf_statement" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="155" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="175" package="LibRDF">
        <name>getSubject</name>
        <full_name>getSubject</full_name>
        <docblock line="169">
          <description>Get the statement's subject.</description>
          <long-description/>
          <tag line="169" name="return" description="The statement's subject" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="169" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="190" package="LibRDF">
        <name>getPredicate</name>
        <full_name>getPredicate</full_name>
        <docblock line="184">
          <description>Get the statement's predicate</description>
          <long-description/>
          <tag line="184" name="return" description="The statement's predicate" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="184" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="203" package="LibRDF">
        <name>getObject</name>
        <full_name>getObject</full_name>
        <docblock line="197">
          <description>Get the statement's object.</description>
          <long-description/>
          <tag line="197" name="return" description="The statement's object" type="\LibRDF_Node">
            <type by_reference="false">\LibRDF_Node</type>
          </tag>
          <tag line="197" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="220" package="LibRDF">
        <name>isEqual</name>
        <full_name>isEqual</full_name>
        <docblock line="210">
          <description>Compare this statement with another statement.</description>
          <long-description>&lt;p&gt;Two statements are equal if each of the three nodes in a statement
are equal to the corresponding nodes in the other statement.&lt;/p&gt;</long-description>
          <tag line="210" name="param" description="The statement against which to compare" type="\LibRDF_Statement" variable="$statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="210" name="return" description="Whether the statements are equal" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="210" name="access" description="public"/>
        </docblock>
        <argument line="220">
          <name>$statement</name>
          <default/>
          <type>\LibRDF_Statement</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <notice line="62" code="50013">Parameter $statement could not be found in __construct()</notice>
      <notice line="62" code="50013">Parameter $predicate could not be found in __construct()</notice>
      <notice line="62" code="50013">Parameter $object could not be found in __construct()</notice>
    </parse_markers>
  </file>
  <file path="public/lib/LibRDF/Iterator.php" hash="e42c269912def8d76c59a369deb10a6d" package="LibRDF">
    <docblock line="2">
      <description>Wrap a librdf_iterator as a PHP iterator using SPL.</description>
      <long-description>&lt;p&gt;PHP version 5&lt;/p&gt;

&lt;p&gt;Copyright (C) 2006, David Shea &lt;a href="&amp;#109;a&amp;#105;l&amp;#116;o&amp;#x3a;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;"&gt;d&amp;#x61;&amp;#118;&amp;#x69;&amp;#100;&amp;#x40;&amp;#103;&amp;#x6f;&amp;#112;&amp;#x68;&amp;#101;&amp;#x72;&amp;#110;&amp;#x65;&amp;#116;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#103;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: This package is Free Software and a derivative work of Redland
http://librdf.org/.  This package is not endorsed by Dave Beckett or the
University of Bristol. It is licensed under the following three licenses as
alternatives:
  1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
  2. GNU General Public License (GPL) V2 or any newer version
  3. Apache License, V2.0 or any newer version&lt;/p&gt;

&lt;p&gt;You may not use this file except in compliance with at least one of the
above three licenses.&lt;/p&gt;

&lt;p&gt;See LICENSE.txt at the top of this package for the complete terms and futher
detail along with the license tests for the licenses in COPYING.LIB, COPYING
and LICENSE-2.0.txt repectively.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="LibRDF"/>
      <tag line="2" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
      <tag line="2" name="copyright" description="2006 David Shea"/>
      <tag line="2" name="license" description="LGPL/GPL/APACHE"/>
      <tag line="2" name="version" description="Release: 1.0.0"/>
      <tag line="2" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
    </docblock>
    <include line="34" type="Require Once" package="Default">
      <name/>
      <docblock line="32">
        <description/>
        <long-description/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="50" package="LibRDF">
      <extends/>
      <implements>\Iterator</implements>
      <name>LibRDF_Iterator</name>
      <full_name>\LibRDF_Iterator</full_name>
      <docblock line="36">
        <description>Wrap a librdf_iterator resource as an iterable object.</description>
        <long-description>&lt;p&gt;Objects of this type may only be used for iteration once.  Once iteration
has begun, a call to rewind will render the object invalid.&lt;/p&gt;</long-description>
        <tag line="36" name="package" description="LibRDF"/>
        <tag line="36" name="author" description="Felix Ostrowski &lt;felix.ostrowski@googlemail.com&gt;"/>
        <tag line="36" name="author" description="David Shea &lt;david@gophernet.org&gt;"/>
        <tag line="36" name="copyright" description="2006 David Shea, 2012 Felix Ostrowski"/>
        <tag line="36" name="license" description="LGPL/GPL/APACHE"/>
        <tag line="36" name="version" description="Release: 1.0.0"/>
        <tag line="36" name="link" description="http://www.gophernet.org/projects/redland-php/" link="http://www.gophernet.org/projects/redland-php/"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="58" namespace="global" package="Default">
        <name>$isvalid</name>
        <default/>
        <docblock line="52">
          <description>A cache of whether the iterator is still valid.</description>
          <long-description/>
          <tag line="52" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="52" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="66" namespace="global" package="Default">
        <name>$iterator</name>
        <default/>
        <docblock line="60">
          <description>The underlying librdf_iterator resource.</description>
          <long-description/>
          <tag line="60" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="60" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="78" namespace="global" package="Default">
        <name>$key</name>
        <default/>
        <docblock line="68">
          <description>An integer used to provide keys over the iteration.</description>
          <long-description>&lt;p&gt;There are no keys created by the librdf_iterator data, so iteration
keys are created as an integer with an initial value of 0 increasing
by one for each call of {@link next}.&lt;/p&gt;</long-description>
          <tag line="68" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="68" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="87" namespace="global" package="Default">
        <name>$source</name>
        <default/>
        <docblock line="80">
          <description>A reference to the iterator's source object to prevent it from being
garbage collected before the iterator.</description>
          <long-description/>
          <tag line="80" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="80" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="98" namespace="global" package="Default">
        <name>$rewindable</name>
        <default/>
        <docblock line="89">
          <description>A flag for whether the iterator is rewindable.</description>
          <long-description>&lt;p&gt;A iterator may be rewound before {@link next} is called, after which
rewinding invalidates the iterator.&lt;/p&gt;</long-description>
          <tag line="89" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="89" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="LibRDF">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="100">
          <description>Create a new iterable object from a librdf_iterator resource.</description>
          <long-description>&lt;p&gt;User functions should not create librdf_iterator resources directly,
so this constructor is intended only to provide an interface into the
iterators returned by librdf functions and called by LibRDF classes.&lt;/p&gt;</long-description>
          <tag line="100" name="param" description="The librdf_iterator object to wrap" type="resource" variable="$iterator">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="100" name="param" description="The object that created the iterator" type="mixed" variable="$source">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="100" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="100" name="access" description="public"/>
        </docblock>
        <argument line="112">
          <name>$iterator</name>
          <default/>
          <type/>
        </argument>
        <argument line="112">
          <name>$source</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="127" package="LibRDF">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="121">
          <description>Free the iterator's resources.</description>
          <long-description/>
          <tag line="121" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="121" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="143" package="LibRDF">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="134">
          <description>Clone a LibRDF_Iterator object.</description>
          <long-description>&lt;p&gt;Cloning a iterator is unsupported, so using the clone operator on a
LibRDF_Iterator object will produce an empty iterator.&lt;/p&gt;</long-description>
          <tag line="134" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="134" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="158" package="LibRDF">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="149">
          <description>Rewind the iterator.</description>
          <long-description>&lt;p&gt;Rewinding is not supported, so this call invalidates the iterator unless
the iterator is still at the starting position.&lt;/p&gt;</long-description>
          <tag line="149" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="149" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="171" package="LibRDF">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="165">
          <description>Return the current node or NULL if the iterator is no longer valid.</description>
          <long-description/>
          <tag line="165" name="return" description="The current node on the iterator" type="\LibRDF_Statement">
            <type by_reference="false">\LibRDF_Statement</type>
          </tag>
          <tag line="165" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="193" package="LibRDF">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="187">
          <description>Return the key of the current element on the iterator.</description>
          <long-description/>
          <tag line="187" name="return" description="The current key" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="187" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="204" package="LibRDF">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="198">
          <description>Advance the iterator's position.</description>
          <long-description/>
          <tag line="198" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="198" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="223" package="LibRDF">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="217">
          <description>Return whether the iterator is still valid.</description>
          <long-description/>
          <tag line="217" name="return" description="Whether the iterator is still valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="217" name="access" description="public"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="public/ontologies/sparql.php" hash="f960dcf25b9e40cf3f37003f4c754918" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name>lib/LibRDF/LibRDF.php</name>
    </include>
    <function namespace="global" line="4" package="Default">
      <name>query</name>
      <full_name>\query</full_name>
      <argument line="4">
        <name>$person</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="286" package="Default">
      <name>formatSet</name>
      <full_name>\formatSet</full_name>
      <argument line="286">
        <name>$string</name>
        <default/>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file public/ontologies/sparql.php</error>
      <error line="4" code="50009">No DocBlock was found for function \query()</error>
      <error line="286" code="50009">No DocBlock was found for function \formatSet()</error>
    </parse_markers>
  </file>
  <file path="public/index.php" hash="1c6ed9320f51e96753b4f61d7412b380" package="Default">
    <include line="97" type="Require Once" package="Default">
      <name>ontologies/sparql.php</name>
    </include>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file public/index.php</error>
    </parse_markers>
  </file>
  <package name="ARC2" full_name="ARC2"/>
  <package name="Default" full_name="Default"/>
  <package name="LibRDF" full_name="LibRDF"/>
  <namespace name="global" full_name="global"/>
  <marker count="0">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
